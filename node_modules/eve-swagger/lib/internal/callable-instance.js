'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _CallableInstance = require('callable-instance');

/**
 * ExtensibleFunction extends Function, allowing the addition of members and
 * other methods to be added to the instance like a regular object while still
 * being callable as a regular function. The default function that is executed
 * when called as a function is passed to the constructor.
 * @private
 */

var CallableInstance = function (_CallableInstance2) {
  (0, _inherits3.default)(CallableInstance, _CallableInstance2);

  /**
   * Create an extensible function
   *
   * @param f The default action
   * @constructor
   */
  function CallableInstance(f) {
    (0, _classCallCheck3.default)(this, CallableInstance);

    var _this = (0, _possibleConstructorReturn3.default)(this, (CallableInstance.__proto__ || (0, _getPrototypeOf2.default)(CallableInstance)).call(this, '__callSelf'));

    _this._func = f;
    return _this;
  }

  (0, _createClass3.default)(CallableInstance, [{
    key: '__callSelf',
    value: function __callSelf() {
      return this._func.apply(this, arguments);
    }
  }]);
  return CallableInstance;
}(_CallableInstance);

module.exports = CallableInstance;