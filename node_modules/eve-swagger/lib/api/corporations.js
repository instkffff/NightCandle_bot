'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CallableInstance = require('../internal/callable-instance');
var Search = require('./search');

var _names = require('../internal/names');

/**
 * An api adapter that provides functions for accessing various details for a
 * corporation specified by id via functions in the
 * [corporation](https://esi.tech.ccp.is/latest/#/Corporation) ESI endpoints.
 * This only includes the non-authenticated corporation end points.
 *
 * You should not usually instantiate this directly as its constructor requires
 * an internal api instance. This does not include functions that require a
 * character's authorization.
 */

var Corporation = function () {
  /**
   * Create a new Corporation for the given `agent` provider and specific
   * `corporationId`.
   *
   * @param agent {ESIAgent} The agent used to generate web requests
   * @param corporationId {Number} The corporation id that is used for all
   *     requests
   * @constructor
   */
  function Corporation(agent, corporationId) {
    (0, _classCallCheck3.default)(this, Corporation);

    this._agent = agent;
    this._id = corporationId;
  }

  /**
   * @esi_route get_corporations_corporation_id
   * @esi_example esi.corporations(1).info()
   *
   * @return {Promise.<Object>}
   */


  (0, _createClass3.default)(Corporation, [{
    key: 'info',
    value: function info() {
      return this._agent.noAuth.get('/v3/corporations/{corporation_id}/', { path: { 'corporation_id': this._id } });
    }

    /**
     * @esi_route get_corporations_corporation_id_alliancehistory
     * @esi_example esi.corporations(1).history()
     *
     * @return {Promise.<Array.<Object>>}
     */

  }, {
    key: 'history',
    value: function history() {
      return this._agent.noAuth.get('/v1/corporations/{corporation_id}/alliancehistory/', { path: { 'corporation_id': this._id } });
    }

    /**
     * @esi_route get_corporations_corporation_id_icons
     * @esi_example esi.corporations(1).icon()
     *
     * @return {Promise.<Object>}
     */

  }, {
    key: 'icon',
    value: function icon() {
      return this._agent.noAuth.get('/v1/corporations/{corporation_id}/icons/', { path: { 'corporation_id': this._id } });
    }

    /**
     * @esi_route get_loyalty_stores_corporation_id_offers
     * @esi_example esi.corporations(1).loyaltyOffers()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'loyaltyOffers',
    value: function loyaltyOffers() {
      return this._agent.noAuth.get('/v1/loyalty/stores/{corporation_id}/offers/', { path: { 'corporation_id': this._id } });
    }
  }]);
  return Corporation;
}();

/**
 * An api adapter over the end points handling multiple corporations  via
 * functions in the [corporation](https://esi.tech.ccp.is/latest/#/Corporation)
 * ESI endpoints. You should not usually instantiate this directly as its
 * constructor requires an internal api instance.
 *
 * This is a function class so instances of `Corporations` are functions and can
 * be invoked directly, besides accessing its members. Its default function
 * action is equivalent to {@link Corporations#get get}.
 */


var Corporations = function (_CallableInstance) {
  (0, _inherits3.default)(Corporations, _CallableInstance);

  /**
   * Create a new Corporations function using the given `api`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @constructor
   */
  function Corporations(agent) {
    (0, _classCallCheck3.default)(this, Corporations);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Corporations.__proto__ || (0, _getPrototypeOf2.default)(Corporations)).call(this, function (id) {
      return _this.get(id);
    }));

    _this._agent = agent;

    _this._search = null;
    return _this;
  }

  /**
   * A Search module instance configured to search over the `'corporation'`
   * type.
   *
   * @esi_example esi.corporations.search('text') categories=[corporation] get_search
   *
   * @type {Search}
   */


  (0, _createClass3.default)(Corporations, [{
    key: 'get',


    /**
     * Create a new Corporation end point targeting the particular corporation by
     * `id`.
     *
     * @param id {Number} The corporation id
     * @returns {Corporation}
     */
    value: function get(id) {
      return new Corporation(this._agent, id);
    }

    /**
     * @esi_route get_corporations_npccorps
     * @esi_example esi.corporations.npc()
     *
     * @return {Promise.<Array.<Number>>}
     */

  }, {
    key: 'npc',
    value: function npc() {
      return this._agent.noAuth.get('/v1/corporations/npccorps/');
    }

    /**
     * @esi_route get_corporations_names
     * @esi_param corporation_ids - ids
     * @esi_returns {corporation_id: id, corporation_name: name}
     * @esi_example esi.corporations.names()
     *
     * @param {Array.<Number>} ids
     * @return {Promise.<Array.<Object>>}
     */

  }, {
    key: 'names',
    value: function names(ids) {
      if (ids.length > 20) {
        // Use universe/names end point since the /corporations one breaks if
        // the URL gets too long.
        return _names(this._agent, 'corporation', ids);
      } else {
        // Use alliance/names end point and
        return this._agent.noAuth.get('/v1/corporations/names/', { query: { 'corporation_ids': ids } }).then(function (result) {
          // Rename corporation_id and corporation_name
          return result.map(function (r) {
            return {
              id: r.corporation_id,
              name: r.corporation_name
            };
          });
        });
      }
    }
  }, {
    key: 'search',
    get: function get() {
      if (!this._search) {
        this._search = new Search(this._agent, ['corporation']);
      }
      return this._search;
    }
  }]);
  return Corporations;
}(CallableInstance);

module.exports = Corporations;