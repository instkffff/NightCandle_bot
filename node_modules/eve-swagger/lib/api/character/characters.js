'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Promise = require('bluebird');

var CallableInstance = require('../../internal/callable-instance');

var _require = require('../../internal/page-handler'),
    _require2 = (0, _slicedToArray3.default)(_require, 2),
    MaxIdHandler = _require2[1];

var Search = require('../search');
var Killmail = require('../killmail');

var Autopilot = require('./ui/autopilot');
var Bookmarks = require('./bookmarks');
var Calendar = require('./calendar');
var Colonies = require('./colonies');
var Contacts = require('./contacts');
var CharacterCorporation = require('./character-corporation');
var Fittings = require('./fittings');
var Fleet = require('./fleet');
var Mail = require('./mail');
var Structures = require('./structures');
var Window = require('./ui/window');

var _names = require('../../internal/names');

/**
 * An api adapter that provides functions for viewing public (non-authenticated)
 * information about a specific character  via functions in the
 * [character](https://esi.tech.ccp.is/latest/#/Character) ESI endpoints. You
 * should not usually instantiate this directly as its constructor requires an
 * internal api instance.
 */

var CharacterInfo = function () {
  /**
   * Create a new CharacterInfo for the given `agent`, targeting the
   * specific `characterId`.
   *
   * @param agent {ESIAgent} The agent used to generate web requests
   * @param characterId {Number} The id used for all character requests
   * @constructor
   */
  function CharacterInfo(agent, characterId) {
    (0, _classCallCheck3.default)(this, CharacterInfo);

    this._agent = agent;
    this._id = characterId;
  }

  /**
   * @esi_route get_characters_character_id
   * @esi_example esi.characters(1).info()
   *
   * @returns {Promise.<Object>}
   */


  (0, _createClass3.default)(CharacterInfo, [{
    key: 'info',
    value: function info() {
      return this._agent.noAuth.get('/v4/characters/{character_id}/', { path: { 'character_id': this._id } });
    }

    /**
     * @esi_route get_characters_character_id_portrait
     * @esi_example esi.characters(1).portrait()
     *
     * @returns {Promise.<Object>}
     */

  }, {
    key: 'portrait',
    value: function portrait() {
      return this._agent.noAuth.get('/v2/characters/{character_id}/portrait/', { path: { 'character_id': this._id } });
    }

    /**
     * @esi_route get_characters_character_id_corporationhistory
     * @esi_example esi.characters(1).history()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'history',
    value: function history() {
      return this._agent.noAuth.get('/v1/characters/{character_id}/corporationhistory/', { path: { 'character_id': this._id } });
    }
  }]);
  return CharacterInfo;
}();

/**
 * An extension of {@link CharacterInfo} that adds the remaining
 * character-linked, authenticated from the
 * [character](https://esi.tech.ccp.is/latest/#/Character) and related ESI end
 * points.
 *
 * @see https://esi.tech.ccp.is/latest/#/Character
 * @see https://esi.tech.cpp.is/latest/#/Assets
 * @see https://esi.tech.cpp.is/latest/#/Bookmarks
 * @see https://esi.tech.cpp.is/latest/#/Clones
 * @see https://esi.tech.cpp.is/latest/#/Fittings
 * @see https://esi.tech.cpp.is/latest/#/Killmails
 * @see https://esi.tech.cpp.is/latest/#/Location
 * @see https://esi.tech.ccp.is/latest/#/Planetary_Interaction
 * @see https://esi.tech.ccp.is/latest/#/Skills
 * @see https://esi.tech.ccp.is/latest/#/Wallet
 */


var Character = function (_CharacterInfo) {
  (0, _inherits3.default)(Character, _CharacterInfo);

  /**
   * Create a new CharacterInfo for the given `agent`, targeting the
   * specific `characterId`.
   *
   * @param agent {ESIAgent} The agent used to generate web requests
   * @param characterId {Number} The id used for all character requests
   * @param token {String} The SSO access token for the character
   * @constructor
   */
  function Character(agent, characterId, token) {
    (0, _classCallCheck3.default)(this, Character);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Character.__proto__ || (0, _getPrototypeOf2.default)(Character)).call(this, agent, characterId));

    _this._token = token;

    _this._allKills = new MaxIdHandler(function (id) {
      return _this.recentKills(id);
    }, function (k) {
      return k.killmail_id;
    }, 50);
    _this._allMails = new MaxIdHandler(function (id) {
      return _this.recentKillmails(id);
    }, function (km) {
      return km.killmail_id;
    }, 50);
    _this._kills = null;

    _this._bms = null;
    _this._cal = null;
    _this._contacts = null;
    _this._corp = null;
    _this._fit = null;
    _this._mail = null;
    _this._pi = null;
    _this._struct = null;
    _this._auto = null;
    _this._win = null;
    return _this;
  }

  /**
   * An Autopilot instance linked to this Character.
   *
   * @type {Autopilot}
   */


  (0, _createClass3.default)(Character, [{
    key: 'fleet',


    /**
     * Get a Fleet instance for the given fleet `id`.
     *
     * @param id The fleet id this character belongs to.
     * @returns {Fleet}
     */
    value: function fleet(id) {
      return new Fleet(this._agent, this._token, id);
    }

    /**
     * @esi_route get_characters_character_id_assets
     * @esi_example esi.characters(1, 'token').assets()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'assets',
    value: function assets() {
      return this._agent.auth(this._token).get('/v1/characters/{character_id}/assets/', { path: { 'character_id': this._id } });
    }

    /**
     * @esi_route get_characters_character_id_clones
     * @esi_example esi.characters(1, 'token').clones()
     *
     * @returns {Promise.<Object>}
     */

  }, {
    key: 'clones',
    value: function clones() {
      return this._agent.auth(this._token).get('/v2/characters/{character_id}/clones/', { path: { 'character_id': this._id } });
    }

    /**
     * Get the kill details for the recent {@link Character#recentKillmails
     * recentKillmails} and then uses {@link Killmail#get} to map the details.
     * The request resolves to an array, each containing a killmail detail.
     *
     * @esi_example esi.characters(1, 'token').recentKills() ~ get_characters_character_id_killmails_recent
     *
     * @param maxKillId {Number} Optional; the mail id that limits which mails
     *   can be returned. If provided recent mails older than the id are returned
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'recentKills',
    value: function recentKills() {
      var _this2 = this;

      var maxKillId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (this._kills == null) {
        this._kills = new Killmail(this._agent);
      }

      return this.recentKillmails(maxKillId).then(function (kms) {
        return Promise.map(kms, function (km) {
          return _this2._kills.get(km.killmail_id, km.killmail_hash);
        });
      });
    }

    /**
     * Get all kill, over all of history, for the given character. This makes
     * multiple calls to {@link Character#recentKills recentKills}. This
     * should be used with caution as some characters may have a very large number
     * of kills.
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'kills',
    value: function kills() {
      return this._allKills.getAll();
    }

    /**
     * @esi_route get_characters_character_id_killmails_recent
     * @esi_param max_count - 50
     * @esi_example esi.characters(1, 'token').recentKillmails() ~ get_characters_character_id_killmails_recent
     *
     * @param maxKillId {Number} If `0`, the most recent killmails are returned.
     * @returns {Promise.<Array.<Object>>}
     * @see Killmail#get
     */

  }, {
    key: 'recentKillmails',
    value: function recentKillmails() {
      var maxKillId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      var opts = { maxCount: 50 };
      if (maxKillId != 0) {
        opts.maxKillId = maxKillId;
      }
      return this._agent.auth(this._token).get('/v1/characters/{character_id}/killmails/recent/', {
        path: { 'character_id': this._id },
        query: {
          'max_kill_id': maxKillId == 0 ? null : maxKillId,
          'max_count': 50
        }
      });
    }

    /**
     * Get all killmails, over all of history, for the given character. This makes
     * multiple calls to {@link Character#recentKillmails recentKillmails}. This
     * should be used with caution as some characters may have a very large number
     * of kills.
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'killmails',
    value: function killmails() {
      return this._allMails.getAll();
    }

    /**
     * @esi_route get_characters_character_id_loyalty_points
     * @esi_example esi.characters(1, 'token').loyaltyPoints()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'loyaltyPoints',
    value: function loyaltyPoints() {
      return this._agent.auth(this._token).get('/v1/characters/{character_id}/loyalty/points/', { path: { 'character_id': this._id } });
    }

    /**
     * @esi_route get_characters_character_id_ship
     * @esi_example esi.characters(1, 'token').ship()
     *
     * @returns {Promise.<Object>}
     */

  }, {
    key: 'ship',
    value: function ship() {
      return this._agent.auth(this._token).get('/v1/characters/{character_id}/ship/', { path: { 'character_id': this._id } });
    }

    /**
     * @esi_route get_characters_character_id_location
     * @esi_example esi.characters(1, 'token').location()
     *
     * @returns {Promise.<Object>}
     */

  }, {
    key: 'location',
    value: function location() {
      return this._agent.auth(this._token).get('/v1/characters/{character_id}/location/', { path: { 'character_id': this._id } });
    }

    /**
     * @esi_route get_characters_character_id_online
     * @esi_example esi.characters(1, 'token').online()
     *
     * @returns {Promise.<Boolean>}
     */

  }, {
    key: 'online',
    value: function online() {
      return this._agent.auth(this._token).get('/v1/characters/{character_id}/online/', { path: { 'character_id': this._id } });
    }

    /**
     * @esi_route get_characters_character_id_wallets
     * @esi_example esi.characters(1, 'token').wallets()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'wallets',
    value: function wallets() {
      return this._agent.auth(this._token).get('/v1/characters/{character_id}/wallets/', { path: { 'character_id': this._id } });
    }

    /**
     * @esi_route get_characters_character_id_skills
     * @esi_example esi.characters(1, 'token').skills()
     *
     * @returns {Promise.<Object>}
     */

  }, {
    key: 'skills',
    value: function skills() {
      return this._agent.auth(this._token).get('/v3/characters/{character_id}/skills/', { path: { 'character_id': this._id } });
    }

    /**
     * @esi_route get_characters_character_id_skillqueue
     * @esi_example esi.characters(1, 'token').skillqueue()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'skillqueue',
    value: function skillqueue() {
      return this._agent.auth(this._token).get('/v2/characters/{character_id}/skillqueue/', { path: { 'character_id': this._id } });
    }

    /**
     * @esi_route get_characters_character_id_agents_research
     * @esi_example esi.characters(1, 'token').agentResearch()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'agentResearch',
    value: function agentResearch() {
      return this._agent.auth(this._token).get('/v1/characters/{character_id}/agents_research/', { path: { 'character_id': this._id } });
    }

    /**
     * @esi_route get_characters_character_id_chat_channels
     * @esi_example esi.characters(1, 'token').chatChannels()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'chatChannels',
    value: function chatChannels() {
      return this._agent.auth(this._token).get('/v1/characters/{character_id}/chat_channels/', { path: { 'character_id': this._id } });
    }

    /**
     * @esi_route get_characters_character_id_medals
     * @esi_example esi.characters(1, 'token').medals()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'medals',
    value: function medals() {
      return this._agent.auth(this._token).get('/v1/characters/{character_id}/medals/', { path: { 'character_id': this._id } });
    }

    /**
     * @esi_route get_characters_character_id_standings
     * @esi_example esi.characters(1, 'token').standings()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'standings',
    value: function standings() {
      return this._agent.auth(this._token).get('/v1/characters/{character_id}/standings/', { path: { 'character_id': this._id } });
    }

    /**
     * @esi_route get_characters_character_id_opportunities
     * @esi_example esi.characters(1, 'token').opportunities()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'opportunities',
    value: function opportunities() {
      return this._agent.auth(this._token).get('/v1/characters/{character_id}/opportunities/', { path: { 'character_id': this._id } });
    }

    /**
     * @esi_route get_characters_character_id_orders
     * @esi_example esi.characters(1, 'token').orders()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'orders',
    value: function orders() {
      return this._agent.auth(this._token).get('/v1/characters/{character_id}/orders/', { path: { 'character_id': this._id } });
    }

    /**
     * @esi_route get_characters_character_id_blueprints
     * @esi_example esi.characters(1, 'token').blueprints()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'blueprints',
    value: function blueprints() {
      return this._agent.auth(this._token).get('/v1/characters/{character_id}/blueprints/', { path: { 'character_id': this._id } });
    }

    /**
     * @esi_route get_characters_character_id_roles
     * @esi_example esi.characters(1, 'token').roles()
     *
     * @returns {Promise.<Array.<String>>}
     */

  }, {
    key: 'roles',
    value: function roles() {
      return this._agent.auth(this._token).get('/v1/characters/{character_id}/roles/', { path: { 'character_id': this._id } });
    }

    /**
     * @esi_route get_characters_character_id_industry_jobs
     * @esi_example esi.characters(1, 'token').industryJobs()
     *
     * @param includeCompleted
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'industryJobs',
    value: function industryJobs() {
      var includeCompleted = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      return this._agent.auth(this._token).get('/v1/characters/{character_id}/industry/jobs/', {
        path: { 'character_id': this._id },
        query: { 'include_completed': includeCompleted }
      });
    }
  }, {
    key: 'autopilot',
    get: function get() {
      if (!this._auto) {
        this._auto = new Autopilot(this._agent, this._token);
      }
      return this._auto;
    }

    /**
     * A Bookmarks instance linked to this Character.
     *
     * @type {Bookmarks}
     */

  }, {
    key: 'bookmarks',
    get: function get() {
      if (!this._bms) {
        this._bms = new Bookmarks(this._agent, this._id, this._token);
      }
      return this._bms;
    }

    /**
     * A Calendar instance linked to this Character.
     *
     * @type {Calendar}
     */

  }, {
    key: 'calendar',
    get: function get() {
      if (!this._cal) {
        this._cal = new Calendar(this._agent, this._id, this._token);
      }
      return this._cal;
    }

    /**
     * A Colonies instance linked to this Character.
     *
     * @type {Colonies}
     */

  }, {
    key: 'colonies',
    get: function get() {
      if (!this._pi) {
        this._pi = new Colonies(this._agent, this._id, this._token);
      }
      return this._pi;
    }

    /**
     * A Contacts instance linked to this Character.
     *
     * @type {Contacts}
     */

  }, {
    key: 'contacts',
    get: function get() {
      if (!this._contacts) {
        this._contacts = new Contacts(this._agent, this._id, this._token);
      }
      return this._contacts;
    }

    /**
     * A CharacterCorporation instance linked to this Character.
     *
     * @type {CharacterCorporation}
     */

  }, {
    key: 'corporation',
    get: function get() {
      if (!this._corp) {
        this._corp = new CharacterCorporation(this._agent, this._id, this._token);
      }
      return this._corp;
    }

    /**
     * A Fittings instance linked to this Character.
     *
     * @type {Fittings}
     */

  }, {
    key: 'fittings',
    get: function get() {
      if (!this._fit) {
        this._fit = new Fittings(this._agent, this._id, this._token);
      }
      return this._fit;
    }

    /**
     * A Mail instance linked to this Character.
     *
     * @type {Mail}
     */

  }, {
    key: 'mail',
    get: function get() {
      if (!this._mail) {
        this._mail = new Mail(this._agent, this._id, this._token);
      }
      return this._mail;
    }

    /**
     * A Structures instance linked to this Character.
     *
     * @type {Structures}
     */

  }, {
    key: 'structures',
    get: function get() {
      if (!this._struct) {
        this._struct = new Structures(this);
      }
      return this._struct;
    }

    /**
     * A Window instance linked to this Character.
     *
     * @type {Window}
     */

  }, {
    key: 'window',
    get: function get() {
      if (!this._win) {
        this._win = new Window(this._agent, this._token);
      }
      return this._win;
    }
  }]);
  return Character;
}(CharacterInfo);

/**
 * An api adapter over the end points handling multiple characters via functions
 * in the [character](https://esi.tech.ccp.is/latest/#/Character) ESI
 * endpoints. You should not usually instantiate this directly as its
 * constructor requires an internal api instance.
 *
 * This is a function class so instances of `Characters` are functions and can
 * be invoked directly, besides accessing its members. Its default function
 * action is equivalent to {@link Characters#get get}.
 */


var Characters = function (_CallableInstance) {
  (0, _inherits3.default)(Characters, _CallableInstance);

  /**
   * Create a new Characters function using the given `agent`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @constructor
   */
  function Characters(agent) {
    (0, _classCallCheck3.default)(this, Characters);

    var _this3 = (0, _possibleConstructorReturn3.default)(this, (Characters.__proto__ || (0, _getPrototypeOf2.default)(Characters)).call(this, function (id, token) {
      return _this3.get(id, token);
    }));

    _this3._agent = agent;

    _this3._search = null;
    return _this3;
  }

  /**
   * A Search module instance configured to search over the `'character'`
   * type.
   *
   * @esi_example esi.characters.search categories=[character] get_search
   *
   * @type {Search}
   */


  (0, _createClass3.default)(Characters, [{
    key: 'get',


    /**
     * Create a new CharacterInfo or Character end point targeting the particular
     * character by `id`. If `token` is provided then an authorized Character is
     * returned, otherwise the non-authenticated CharacterInfo is returned.
     *
     * @param id {Number} The character id
     * @param token {String} Optional; the character's SSO token
     * @returns {Character|CharacterInfo}
     */
    value: function get(id) {
      var token = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

      if (token && token.length > 0) {
        return new Character(this._agent, id, token);
      } else {
        return new CharacterInfo(this._agent, id);
      }
    }

    /**
     * @esi_route post_characters_affiliation
     * @esi_param characters - ids
     * @esi_example esi.characters.affiliations(ids)
     *
     * @param ids {Array.<Number>}
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'affiliations',
    value: function affiliations(ids) {
      return this._agent.noAuth.post('/v1/characters/affiliation/', { body: ids });
    }

    /**
     * @esi_route get_characters_names
     * @esi_param character_ids - ids
     * @esi_returns {character_id: id, character_name: name}
     * @esi_example esi.characters.names(ids)
     *
     * @param ids {Array.<Number>}
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'names',
    value: function names(ids) {
      if (ids.length > 20) {
        // Use universe/names end point since the /characters one breaks if
        // the URL gets too long.
        return _names(this._agent, 'character', ids);
      } else {
        // Use character/names end point
        return this._agent.noAuth.get('/v1/characters/names/', { query: { 'character_ids': ids } }).then(function (result) {
          // Rename character_id and character_name
          return result.map(function (r) {
            return {
              id: r.character_id,
              name: r.character_name
            };
          });
        });
      }
    }
  }, {
    key: 'search',
    get: function get() {
      if (!this._search) {
        this._search = new Search(this._agent, ['character']);
      }
      return this._search;
    }
  }]);
  return Characters;
}(CallableInstance);

module.exports = Characters;