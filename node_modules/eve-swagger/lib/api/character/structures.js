'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CallableInstance = require('../../internal/callable-instance');

var _require = require('../../internal/page-handler'),
    _require2 = (0, _slicedToArray3.default)(_require, 1),
    PageHandler = _require2[0];

var Search = require('../search');

/**
 * An api adapter that provides functions for accessing various details for a
 * structure accessible by the character, specified by id, via functions in the
 * [universe](https://esi.tech.ccp.is/latest/#/Universe) ESI endpoints. You
 * should not usually instantiate this directly as its constructor requires an
 * internal api instance.
 */

var Structure = function () {
  /**
   * Create a new Structure for the given `character` and specific
   * `structureId`. Requires a character with access to the structure.
   *
   * @param character {Character} The character with access to the structure
   * @param structureId {Number} The structure id that is used for all requests
   * @constructor
   */
  function Structure(character, structureId) {
    var _this = this;

    (0, _classCallCheck3.default)(this, Structure);

    this._char = character;
    this._id = structureId;
    this._all = new PageHandler(function (page) {
      return _this.orders(page);
    });
  }

  /**
   * @esi_route get_universe_structures_structure_id
   * @esi_example esi.characters(1, 'token').structures(2).info()
   *
   * @returns {Promise.<Object>}
   */


  (0, _createClass3.default)(Structure, [{
    key: 'info',
    value: function info() {
      return this._char._agent.auth(this._char._token).get('/v1/universe/structures/{structure_id}/', { path: { 'structure_id': this._id } });
    }

    /**
     * @esi_route put_corporations_corporation_id_structures_structure_id
     * @esi_example esi.characters(1, 'token').structures(2).vulnerability({...})
     *
     * @param newSchedule {Array.<Object>}
     * @returns {Promise.<Object>}
     */

  }, {
    key: 'vulnerability',
    value: function vulnerability(newSchedule) {
      var _this2 = this;

      return this._char.corporation.id().then(function (corpId) {
        return _this2._char._agent.auth(_this2._char._token).put('/v1/corporations/{corporation_id}/structures/{structure_id}/', {
          path: {
            'corporation_id': corpId,
            'structure_id': _this2._id
          },
          body: newSchedule
        });
      });
    }

    /**
     * @esi_route get_markets_structures_structure_id
     * @esi_example esi.characters(1, 'token').structures(2).orders() orders=all
     *
     * @param page {Number} If `0`, all pages of orders are returned as a
     *     concatenated array.
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'orders',
    value: function orders() {
      var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (page == 0) {
        return this._all.getAll();
      } else {
        return this._char._agent.auth(this._char._token).get('/v1/markets/structures/{structure_id}/', {
          path: { 'structure_id': this._id },
          query: { 'page': page }
        });
      }
    }

    /**
     * Get all buy market orders in the region for the particular item type. This
     * is equivalent to {@link Structure#ordersFor ordersFor} except that it
     * additionally filters orders to have `is_buy_order` set to `true`.
     *
     * @esi_example esi.characters(1, 'token').structures(2).orders() orders=buy&typeId get_markets_structures_structure_id
     *
     * @param typeId {Number} The type id to query from the market
     * @return {Promise.<Array.<Object>>} A Promise that resolves to the response
     *     of the request
     */

  }, {
    key: 'buyOrdersFor',
    value: function buyOrdersFor(typeId) {
      return this.ordersFor(typeId).then(function (typeOrders) {
        return typeOrders.filter(function (o) {
          return o.is_buy_order == true;
        });
      });
    }

    /**
     * Get all sell market orders in the region for the particular item type.
     * This
     * is equivalent to {@link Structure#ordersFor ordersFor} except that it
     * additionally filters orders to have `is_buy_order` set to `false`.
     *
     * @esi_example esi.characters(1, 'token').structures(2).orders() orders=sell&typeId get_markets_structures_structure_id
     *
     * @param typeId {Number} The type id to query from the market
     * @return {Promise.<Array.<Object>>} A Promise that resolves to the response
     *     of the request
     */

  }, {
    key: 'sellOrdersFor',
    value: function sellOrdersFor(typeId) {
      return this.ordersFor(typeId).then(function (typeOrders) {
        return typeOrders.filter(function (o) {
          return o.is_buy_order == false;
        });
      });
    }

    /**
     * Get all market orders in the region for the given item type from the
     * ESI endpoint. Orders include buy and sell, but are restricted to the
     * selected type id.
     *
     * While the ESI endpoints support native type filtering for regions, this
     * type filtering is implemented in-library for structures. This means that
     * all orders for the structure are requested via {@link Structure.orders
     * orders} and then filtered.
     *
     * @esi_example esi.characters(1, 'token').structures(2).orders() orders=all&typeId get_markets_structures_structure_id
     *
     * @param typeId {Number} The type id to query from the market
     * @return {Promise.<Array.<Object>>} A Promise that resolves to the response
     *     of the request
     */

  }, {
    key: 'ordersFor',
    value: function ordersFor(typeId) {
      return this.orders().then(function (allOrders) {
        return allOrders.filter(function (o) {
          return o.type_id == typeId;
        });
      });
    }
  }]);
  return Structure;
}();

/**
 * An api adapter over the end points handling structures via functions in the
 * [universe](https://esi.tech.ccp.is/latest/#/Universe) and
 * [search](https://esi.tech.ccp.is/latest/#/Search) ESI endpoints. You
 * should not usually instantiate this directly as its constructor requires an
 * internal api instance.
 *
 * This is a function class so instances of `Structures` are functions and can
 * be invoked directly, besides accessing its members. Its default function
 * action is equivalent to {@link Structures#get get}.
 */


var Structures = function (_CallableInstance) {
  (0, _inherits3.default)(Structures, _CallableInstance);

  /**
   * Create a new Structures function tied to the given character.
   *
   * @param character {Character}
   * @constructor
   */
  function Structures(character) {
    (0, _classCallCheck3.default)(this, Structures);

    var _this3 = (0, _possibleConstructorReturn3.default)(this, (Structures.__proto__ || (0, _getPrototypeOf2.default)(Structures)).call(this, function (id) {
      return _this3.get(id);
    }));

    _this3._char = character;

    _this3._search = null;
    return _this3;
  }

  /**
   * A Search module instance configured to search over the `'structure'`
   * type and linked to the character.
   *
   * @esi_example esi.characters(1, 'token').structures.search('text') category=[structure] get_characters_character_id_search
   *
   * @type {Search}
   */


  (0, _createClass3.default)(Structures, [{
    key: 'get',


    /**
     * Create a new Structure end point targeting the particular structure by
     * `id`.
     *
     * @param id {Number} The structure id
     * @returns {Structure}
     */
    value: function get(id) {
      return new Structure(this._char, id);
    }
  }, {
    key: 'search',
    get: function get() {
      if (!this._search) {
        this._search = new Search(this._char._agent, ['structure'], this._char._id, this._char._token);
      }
      return this._search;
    }
  }]);
  return Structures;
}(CallableInstance);

module.exports = Structures;