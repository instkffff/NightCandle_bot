'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CallableInstance = require('../../internal/callable-instance');

/**
 * An api adapter over the end points handling the planetary interaction
 * colonies for a character via functions in the [planetary
 * interaction](https://esi.tech.ccp.is/latest/#/Planetary_Interaction) ESI
 * endpoints. You should not usually instantiate this directly as its
 * constructor requires an internal api instance.
 *
 * This is a function class so instances of `Colonies` are functions and can be
 * invoked directly, besides accessing its members. Its default function action
 * is equivalent to {@link Colonies#layout layout} or {@link Colonies#all all}
 * if no id is given.
 */

var Colonies = function (_CallableInstance) {
  (0, _inherits3.default)(Colonies, _CallableInstance);

  /**
   * Create a new Colonies function for the character, including its SSO token.
   *
   * @param agent {ESIAgent} The ESI agent
   * @param characterId {Number} The id of the character whose PI is accessed
   * @param token {String} The SSO access token for the character
   * @constructor
   */
  function Colonies(agent, characterId, token) {
    (0, _classCallCheck3.default)(this, Colonies);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Colonies.__proto__ || (0, _getPrototypeOf2.default)(Colonies)).call(this, function (id) {
      return id ? _this.layout(id) : _this.all();
    }));

    _this._agent = agent;
    _this._id = characterId;
    _this._token = token;
    return _this;
  }

  /**
   * @esi_route get_characters_character_id_planets_planet_id
   * @esi_example esi.characters(1, 'token').colonies.layout(2)
   *
   * @param planetId {Number}
   * @returns {Promise.<Object>}
   */


  (0, _createClass3.default)(Colonies, [{
    key: 'layout',
    value: function layout(planetId) {
      return this._agent.auth(this._token).get('/v2/characters/{character_id}/planets/{planet_id}/', {
        path: {
          'character_id': this._id,
          'planet_id': planetId
        }
      });
    }

    /**
     * @esi_route get_characters_character_id_planets
     * @esi_example esi.characters(1, 'token').colonies()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'all',
    value: function all() {
      return this._agent.auth(this._token).get('/v1/characters/{character_id}/planets/', { path: { 'character_id': this._id } });
    }
  }]);
  return Colonies;
}(CallableInstance);

module.exports = Colonies;