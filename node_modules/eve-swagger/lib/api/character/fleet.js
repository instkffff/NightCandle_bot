'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CallableInstance = require('../../internal/callable-instance');

/**
 * An api adapter over the end points handling a specific squad in a character's
 * fleet via functions in the [fleets](https://esi.tech.ccp.is/latest/#/Fleets)
 * ESI endpoints. You should not usually instantiate this directly as its
 * constructor requires an internal api instance.
 */

var Squad = function () {
  /**
   * Create a new Squad adaptor owned by the given `fleet` corresponding
   * to the given `squadId`.
   *
   * @param fleet {Fleet} The owning fleet
   * @param squadId {Number} The squad id of this instance
   * @constructor
   */
  function Squad(fleet, squadId) {
    (0, _classCallCheck3.default)(this, Squad);

    this._fleet = fleet;
    this._id = squadId;
  }

  /**
   * @esi_route put_fleets_fleet_id_squads_squad_id
   * @esi_param naming - {name}
   * @esi_example esi.characters(1, 'token').fleet(2).wings(3).squads(4).rename('name')
   *
   * @param name {String}
   * @returns {Promise.<Object>}
   */


  (0, _createClass3.default)(Squad, [{
    key: 'rename',
    value: function rename(name) {
      return this._fleet._agent.auth(this._fleet._token).put('/v1/fleets/{fleet_id}/squads/{squad_id}/', {
        path: {
          'fleet_id': this._fleet._id,
          'squad_id': this._id
        },
        body: { 'name': name }
      });
    }

    /**
     * @esi_route delete_fleets_fleet_id_squads_squad_id
     * @esi_example esi.characters(1, 'token').fleet(2).wings(3).squads(4).del()
     *
     * @returns {Promise.<Object>}
     */

  }, {
    key: 'del',
    value: function del() {
      return this._fleet._agent.auth(this._fleet._token).del('/v1/fleets/{fleet_id}/squads/{squad_id}/', {
        path: {
          'fleet_id': this._fleet._id,
          'squad_id': this._id
        }
      });
    }
  }]);
  return Squad;
}();

/**
 * An api adapter over the end points handling the squads in a wing in the
 * character's fleet via functions in the
 * [fleets](https://esi.tech.ccp.is/latest/#/Fleets) ESI endpoints. You should
 * not usually instantiate this directly as its constructor requires an internal
 * api instance.
 *
 * This is a function class so instances of `Squads` are functions and can be
 * invoked directly, besides accessing its members. Its default function action
 * is equivalent to {@link Squads#get get}.
 */


var Squads = function (_CallableInstance) {
  (0, _inherits3.default)(Squads, _CallableInstance);

  /**
   * Create a new Squads function owned by the given `wing`.
   *
   * @param wing {Wing} The owning wing
   * @constructor
   */
  function Squads(wing) {
    (0, _classCallCheck3.default)(this, Squads);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Squads.__proto__ || (0, _getPrototypeOf2.default)(Squads)).call(this, function (id) {
      return _this.get(id);
    }));

    _this._wing = wing;
    return _this;
  }

  /**
   * @esi_route post_fleets_fleet_id_wings_wing_id_squads
   * @esi_returns id:squad_id
   * @esi_example esi.characters(1, 'token').fleet(2).wings(3).squads.add()
   *
   * @returns {Promise.<Number>}
   */


  (0, _createClass3.default)(Squads, [{
    key: 'add',
    value: function add() {
      return this._wing._fleet._agent.auth(this._wing._fleet._token).post('/v1/fleets/{fleet_id}/wings/{wing_id}/squads/', {
        path: {
          'fleet_id': this._wing._fleet._id,
          'wing_id': this._wing._id
        }
      }).then(function (result) {
        return result.squad_id;
      });
    }

    /**
     * The Squad api adapter for accessing and modifying the specific squad of a
     * wing.
     *
     * @returns {Squad}
     */

  }, {
    key: 'get',
    value: function get(id) {
      return new Squad(this._wing._fleet, id);
    }
  }]);
  return Squads;
}(CallableInstance);

/**
 * An api adapter over the end points handling a specific wing in a character's
 * fleet via functions in the [fleets](https://esi.tech.ccp.is/latest/#/Fleets)
 * ESI endpoints. You should not usually instantiate this directly as its
 * constructor requires an internal api instance.
 */


var Wing = function () {
  /**
   * Create a new Wing adaptor owned by the given `fleet` corresponding
   * to the given `wingId`.
   *
   * @param fleet {Fleet} The owning fleet
   * @param wingId {Number} The wing id of this instance
   * @constructor
   */
  function Wing(fleet, wingId) {
    (0, _classCallCheck3.default)(this, Wing);

    this._fleet = fleet;
    this._id = wingId;
    this._squads = new Squads(this);
  }

  /**
   * Get the Squads end point for this particular wing.
   *
   * @type {Squads}
   */


  (0, _createClass3.default)(Wing, [{
    key: 'rename',


    /**
     * @esi_route put_fleets_fleet_id_wings_wing_id
     * @esi_param naming - {name}
     * @esi_example esi.characters(1, 'token').fleet(2).wings(3).rename('name')
     *
     * @param name {String}
     * @returns {Promise.<Object>}
     */
    value: function rename(name) {
      return this._fleet._agent.auth(this._fleet._token).put('/v1/fleets/{fleet_id}/wings/{wing_id}/', {
        path: {
          'fleet_id': this._fleet._id,
          'wing_id': this._id
        },
        body: { 'name': name }
      });
    }

    /**
     * @esi_route delete_fleets_fleet_id_wings_wing_id
     * @esi_example esi.characters(1, 'token').fleet(2).wings(3).del()
     *
     * @returns {Promise.<Object>}
     */

  }, {
    key: 'del',
    value: function del() {
      return this._fleet._agent.auth(this._fleet._token).del('/v1/fleets/{fleet_id}/wings/{wing_id}/', {
        path: {
          'fleet_id': this._fleet._id,
          'wing_id': this._id
        }
      });
    }
  }, {
    key: 'squads',
    get: function get() {
      return this._squads;
    }
  }]);
  return Wing;
}();

/**
 * An api adapter over the end points handling the wings in the character's
 * fleet via functions in the [fleets](https://esi.tech.ccp.is/latest/#/Fleets)
 * ESI endpoints. You should not usually instantiate this directly as its
 * constructor requires an internal api instance.
 *
 * This is a function class so instances of `Wings` are functions and can be
 * invoked directly, besides accessing its members. Its default function action
 * is equivalent to {@link Wings#get get} or {@link Wings#all all} if no id is
 * provided.
 */


var Wings = function (_CallableInstance2) {
  (0, _inherits3.default)(Wings, _CallableInstance2);

  /**
   * Create a new Wings function owned by the given `fleet`.
   *
   * @param fleet {Fleet} The owning fleet
   * @constructor
   */
  function Wings(fleet) {
    (0, _classCallCheck3.default)(this, Wings);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (Wings.__proto__ || (0, _getPrototypeOf2.default)(Wings)).call(this, function (id) {
      return id ? _this2.get(id) : _this2.all();
    }));

    _this2._fleet = fleet;
    return _this2;
  }

  /**
   * @esi_route get_fleets_fleet_id_wings
   * @esi_example esi.characters(1, 'token').fleet(2).wings()
   *
   * @returns {Promise.<Array.<Object>>}
   */


  (0, _createClass3.default)(Wings, [{
    key: 'all',
    value: function all() {
      return this._fleet._agent.auth(this._fleet._token).get('/v1/fleets/{fleet_id}/wings/', { path: { 'fleet_id': this._fleet._id } });
    }

    /**
     * @esi_route post_fleets_fleet_id_wings
     * @esi_returns id:wing_id
     * @esi_example esi.characters(1, 'token').fleet(2).wings.add()
     *
     * @returns {Promise.<Number>}
     */

  }, {
    key: 'add',
    value: function add() {
      return this._fleet._agent.auth(this._fleet._token).post('/v1/fleets/{fleet_id}/wings/', { path: { 'fleet_id': this._fleet._id } }).then(function (result) {
        return result.wing_id;
      });
    }

    /**
     * The Wing api adapter for accessing and modifying the specific wing of a
     * fleet.
     *
     * @returns {Wing}
     */

  }, {
    key: 'get',
    value: function get(id) {
      return new Wing(this._fleet, id);
    }
  }]);
  return Wings;
}(CallableInstance);

/**
 * An api adapter over the end points handling a character's fleet via
 * functions in the [fleets](https://esi.tech.ccp.is/latest/#/Fleets) ESI
 * endpoints. You should not usually instantiate this directly as its
 * constructor requires an internal api instance.
 */


var Fleet = function () {
  /**
   * Create a new Fleet function using the given `agent` with SSO access from
   * `token`. The `fleetId` must also be provided.
   *
   * @param agent {ESIAgent} The ESI agent
   * @param token {String} The SSO access token for the character
   * @param fleetId {Number} The fleet id of the fleet the character belongs to
   * @constructor
   */
  function Fleet(agent, token, fleetId) {
    (0, _classCallCheck3.default)(this, Fleet);

    this._agent = agent;
    this._token = token;
    this._id = fleetId;

    this._wings = new Wings(this);
  }

  /**
   * The Wings api adapter for accessing and modifying the wing state of the
   * fleet.
   *
   * @type {Wings}
   */


  (0, _createClass3.default)(Fleet, [{
    key: 'info',


    /**
     * @esi_route get_fleets_fleet_id
     * @esi_example esi.characters(1, 'token').fleet(2).info()
     *
     * @returns {Promise.<Object>}
     */
    value: function info() {
      return this._agent.auth(this._token).get('/v1/fleets/{fleet_id}/', { path: { 'fleet_id': this._id } });
    }

    /**
     * @esi_route get_fleets_fleet_id_members
     * @esi_example esi.characters(1, 'token').fleet(2).members()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'members',
    value: function members() {
      return this._agent.auth(this._token).get('/v1/fleets/{fleet_id}/members/', { path: { 'fleet_id': this._id } });
    }

    /**
     * @esi_route post_fleets_fleet_id_members
     * @esi_example esi.characters(1, 'token').fleet(2).invite({...})
     *
     * @param invitation {Object}
     * @returns {Promise.<Object>}
     */

  }, {
    key: 'invite',
    value: function invite(invitation) {
      return this._agent.auth(this._token).post('/v1/fleets/{fleet_id}/members/', {
        path: { 'fleet_id': this._id },
        body: invitation
      });
    }

    /**
     * @esi_route delete_fleets_fleet_id_members_member_id
     * @esi_example esi.characters(1, 'token').fleet(2).kick(3)
     *
     * @param memberId {Number}
     * @returns {Promise.<Object>}
     */

  }, {
    key: 'kick',
    value: function kick(memberId) {
      return this._agent.auth(this._token).del('/v1/fleets/{fleet_id}/members/{member_id}/', {
        path: {
          'fleet_id': this._id,
          'member_id': memberId
        }
      });
    }

    /**
     * @esi_route put_fleets_fleet_id_members_member_id
     * @esi_param movement - moveOrder
     * @esi_example esi.characters(1, 'token').fleet(2).move(3, {...})
     *
     * @param memberId {Number}
     * @param moveOrder {Object}
     * @returns {Promise.<Object>}
     */

  }, {
    key: 'move',
    value: function move(memberId, moveOrder) {
      return this._agent.auth(this._token).put('/v1/fleets/{fleet_id}/members/{member_id}/', {
        path: {
          'fleet_id': this._id,
          'member_id': memberId
        },
        body: moveOrder
      });
    }

    /**
     * @esi_route put_fleets_fleet_id
     * @esi_param new_settings - {motd: motd, is_free_move: isFreeMove}
     * @esi_example esi.characters(1, 'token').fleet(2).update({...})
     *
     * @param motd {String}
     * @param isFreeMove {Boolean}
     * @returns {Promise.<Object>}
     */

  }, {
    key: 'update',
    value: function update(_ref) {
      var motd = _ref.motd,
          _ref$isFreeMove = _ref.isFreeMove,
          isFreeMove = _ref$isFreeMove === undefined ? false : _ref$isFreeMove;

      return this._agent.auth(this._token).put('/v1/fleets/{fleet_id}/', {
        path: { 'fleet_id': this._id },
        body: {
          'motd': motd,
          'is_free_move': isFreeMove
        }
      });
    }
  }, {
    key: 'wings',
    get: function get() {
      return this._wings;
    }
  }]);
  return Fleet;
}();

module.exports = Fleet;