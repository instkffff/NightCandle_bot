'use strict';

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * An api adapter that provides functions for modifying the character's in-game
 * waypoints and destination via functions in the [user
 * interface](https://esi.tech.ccp.is/latest/#/User_Interface) ESI endpoints.
 * You should not usually instantiate this directly as its constructor requires
 * an internal api instance.
 */
var Autopilot = function () {
  /**
   * Create a new Autopilot for the given `agent` provider. Requires an access
   * token for a character currently in game.
   *
   * @param agent {ESIAgent} The agent used to generate web requests
   * @param token {String} Access token for the character in game
   * @constructor
   */
  function Autopilot(agent, token) {
    (0, _classCallCheck3.default)(this, Autopilot);

    this._agent = agent;
    this._token = token;
  }

  (0, _createClass3.default)(Autopilot, [{
    key: '_waypoint',
    value: function _waypoint(dest, clearWaypoints, prependWaypoint) {
      return this._agent.auth(this._token).post('/v2/ui/autopilot/waypoint/', {
        query: {
          'destination_id': dest,
          'clear_other_waypoints': clearWaypoints,
          'add_to_beginning': prependWaypoint
        }
      });
    }

    /**
     * @esi_route post_ui_autopilot_waypoint
     * @esi_param destination_id - id
     * @esi_param clear_other_waypoints - true
     * @esi_param add_to_beginning - true
     *
     * @esi_example esi.characters(1, 'token').autopilot.destination(2)
     *
     * @param {Number} id
     * @return {Promise.<Object>}
     */

  }, {
    key: 'destination',
    value: function destination(id) {
      return this._waypoint(id, true, true);
    }

    /**
     * @esi_route post_ui_autopilot_waypoint
     * @esi_param destination_id - id
     * @esi_param clear_other_waypoints - false
     * @esi_param add_to_beginning - false
     *
     * @esi_example esi.characters(1, 'token').autopilot.append(2)
     *
     * @param {Number} id
     * @return {Promise.<Object>}
     */

  }, {
    key: 'append',
    value: function append(id) {
      return this._waypoint(id, false, false);
    }

    /**
     * @esi_route post_ui_autopilot_waypoint
     * @esi_param destination_id - id
     * @esi_param clear_other_waypoints - false
     * @esi_param add_to_beginning - true
     *
     * @esi_example esi.characters(1, 'token').autopilot.prepend(2)
     *
     * @param {Number} id
     * @return {Promise.<Object>}
     */

  }, {
    key: 'prepend',
    value: function prepend(id) {
      return this._waypoint(id, false, true);
    }
  }]);
  return Autopilot;
}();

module.exports = Autopilot;