'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CallableInstance = require('../../internal/callable-instance');

var _require = require('../../internal/page-handler'),
    _require2 = (0, _slicedToArray3.default)(_require, 2),
    MaxIdHandler = _require2[1];

/**
 * An api adapter over the end points handling a specific message in a
 * character's inbox via functions in the
 * [mail](https://esi.tech.ccp.is/latest/#/Mail) ESI endpoints. You should not
 * usually instantiate this directly as its constructor requires an internal api
 * instance.
 */


var Message = function () {
  /**
   * Create a new Message adaptor owned by the given `mail` corresponding to the
   * given `messageId`.
   *
   * @param mail {Mail} The owning fleet
   * @param messageId {Number} The message id of this instance
   * @constructor
   */
  function Message(mail, messageId) {
    (0, _classCallCheck3.default)(this, Message);

    this._mail = mail;
    this._id = messageId;
  }

  /**
   * @esi_route get_characters_character_id_mail_mail_id
   * @esi_example esi.characters(1, 'token').mail(2).info()
   *
   * @returns {Promise.<Object>}
   */


  (0, _createClass3.default)(Message, [{
    key: 'info',
    value: function info() {
      return this._mail._agent.auth(this._mail._token).get('/v1/characters/{character_id}/mail/{mail_id}/', {
        path: {
          'character_id': this._mail._id,
          'mail_id': this._id
        }
      });
    }

    /**
     * @esi_route delete_characters_character_id_mail_mail_id
     * @esi_example esi.characters(1, 'token').mail(2).del()
     *
     * @returns {Promise.<Object>}
     */

  }, {
    key: 'del',
    value: function del() {
      return this._mail._agent.auth(this._mail._token).del('/v1/characters/{character_id}/mail/{mail_id}/', {
        path: {
          'character_id': this._mail._id,
          'mail_id': this._id
        }
      });
    }

    /**
     * @esi_route put_characters_character_id_mail_mail_id
     * @esi_param contents - {labels, read}
     * @esi_example esi.characters(1, 'token').mail(2).update({...})
     *
     * @param labels {Array.<Number>} Array of label ids to attach to the message
     * @param read {Boolean} True or false if the message is marked as read
     * @return {Promise.<Object>}
     */

  }, {
    key: 'update',
    value: function update(_ref) {
      var _ref$labels = _ref.labels,
          labels = _ref$labels === undefined ? [] : _ref$labels,
          _ref$read = _ref.read,
          read = _ref$read === undefined ? true : _ref$read;

      return this._mail._agent.auth(this._mail._token).put('/v1/characters/{character_id}/mail/{mail_id}/', {
        path: {
          'character_id': this._mail._id,
          'mail_id': this._id
        },
        body: {
          labels: labels,
          read: read
        }
      });
    }
  }]);
  return Message;
}();

/**
 * An api adapter over the end points handling a specific label in a
 * character's inbox via functions in the
 * [mail](https://esi.tech.ccp.is/latest/#/Mail) ESI endpoints. You should not
 * usually instantiate this directly as its constructor requires an internal api
 * instance.
 */


var Label = function () {
  /**
   * Create a new Label adaptor owned by the given `mail` corresponding to the
   * given `labelId`.
   *
   * @param mail {Mail} The owning fleet
   * @param labelId {Number} The label id of this instance
   * @constructor
   */
  function Label(mail, labelId) {
    (0, _classCallCheck3.default)(this, Label);

    this._mail = mail;
    this._id = labelId;
  }

  /**
   * @esi_route delete_characters_character_id_mail_labels_label_id
   * @esi_example esi.characters(1, 'token').mail.labels(2).del()
   *
   * @returns {Promise.<Object>}
   */


  (0, _createClass3.default)(Label, [{
    key: 'del',
    value: function del() {
      return this._mail._agent.auth(this._mail._token).del('/v1/characters/{character_id}/mail/labels/{label_id}/', {
        path: {
          'character_id': this._mail._id,
          'label_id': this._id
        }
      });
    }
  }]);
  return Label;
}();

/**
 * An api adapter over the end points handling all labels in the character's
 * inbox via functions in the [mail](https://esi.tech.ccp.is/latest/#/Mail) ESI
 * endpoints. You should not usually instantiate this directly as its
 * constructor requires an internal api instance.
 *
 * This is a function class so instances of `Labels` are functions and can be
 * invoked directly, besides accessing its members. Its default function action
 * is equivalent to {@link Labels#get get} or {@link Labels#all all} if no id is
 * given.
 */


var Labels = function (_CallableInstance) {
  (0, _inherits3.default)(Labels, _CallableInstance);

  /**
   * Create a new Labels function owned by the given `mail`.
   *
   * @param mail {Mail} The owning mail
   * @constructor
   */
  function Labels(mail) {
    (0, _classCallCheck3.default)(this, Labels);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Labels.__proto__ || (0, _getPrototypeOf2.default)(Labels)).call(this, function (id) {
      return id ? _this.get(id) : _this.all();
    }));

    _this._mail = mail;
    return _this;
  }

  /**
   * Get a Label instance corresponding to the given label `id`.
   * @param id The label id
   * @returns {Label}
   */


  (0, _createClass3.default)(Labels, [{
    key: 'get',
    value: function get(id) {
      return new Label(this._mail, id);
    }

    /**
     * @esi_route get_characters_character_id_mail_labels
     * @esi_returns labels
     * @esi_example esi.characters(1, 'token').mail.labels()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'all',
    value: function all() {
      return this._mail._agent.auth(this._mail._token).get('/v3/characters/{character_id}/mail/labels/', {
        path: {
          'character_id': this._mail._id
        }
      }).then(function (result) {
        return result.labels;
      });
    }

    /**
     * @esi_route post_characters_character_id_mail_labels
     * @esi_param label - {name, color}
     * @esi_example esi.characters(1, 'token').mail.labels.add({...})
     *
     * @param name {String}
     * @param color {String} Defaults to white.
     * @returns {Promise.<Number>}
     */

  }, {
    key: 'add',
    value: function add(_ref2) {
      var name = _ref2.name,
          _ref2$color = _ref2.color,
          color = _ref2$color === undefined ? '#ffffff' : _ref2$color;

      return this._mail._agent.auth(this._mail._token).post('/v2/characters/{character_id}/mail/labels/', {
        path: {
          'character_id': this._mail._id
        },
        body: {
          name: name,
          color: color
        }
      });
    }
  }]);
  return Labels;
}(CallableInstance);

/**
 * An api adapter over the end points handling the mail inbox for a character
 * via functions in the [mail](https://esi.tech.ccp.is/latest/#/Mail) ESI
 * endpoints. You should not usually instantiate this directly as its
 * constructor requires an internal api instance.
 *
 * This is a function class so instances of `Mail` are functions and can be
 * invoked directly, besides accessing its members. Its default function action
 * is equivalent to {@link Mail#get get} or {@link Mail#inbox inbox} if no id is
 * given.
 */


var Mail = function (_CallableInstance2) {
  (0, _inherits3.default)(Mail, _CallableInstance2);

  /**
   * Create a new Mail function for the character, including its SSO token.
   *
   * @param agent {ESIAgent} The ESI agent
   * @param characterId {Number} The id of the character whose mail is accessed
   * @param token {String} The SSO access token for the character
   * @constructor
   */
  function Mail(agent, characterId, token) {
    (0, _classCallCheck3.default)(this, Mail);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (Mail.__proto__ || (0, _getPrototypeOf2.default)(Mail)).call(this, function (id) {
      return id ? _this2.get(id) : _this2.inbox();
    }));

    _this2._agent = agent;
    _this2._id = characterId;
    _this2._token = token;

    _this2._all = new MaxIdHandler(function (id) {
      return _this2.inbox([], id);
    }, function (m) {
      return m.mail_id;
    }, 50);
    _this2._labels = null;
    return _this2;
  }

  /**
   * A Labels instance for this character, allowing access to the labels they
   * have created.
   *
   * @type {Labels}
   */


  (0, _createClass3.default)(Mail, [{
    key: 'get',


    /**
     * Get a Message instance for the given message or mail id.
     *
     * @param id The message id
     * @returns {Message}
     */
    value: function get(id) {
      return new Message(this, id);
    }

    /**
     * This makes a request to the `labels` route and then filters the result
     * to just return the total unread count.
     *
     * @esi_route get_characters_character_id_mail_labels
     * @esi_returns total_unread_count
     * @esi_example esi.characters(1, 'token').mail.unreadCount()
     *
     * @returns {Promise.<Number>}
     */

  }, {
    key: 'unreadCount',
    value: function unreadCount() {
      return this._agent.auth(this._token).get('/v3/characters/{character_id}/mail/labels/', {
        path: {
          'character_id': this._id
        }
      }).then(function (result) {
        return result.total_unread_count;
      });
    }

    /**
     * @esi_route post_characters_character_id_cspa
     * @esi_param characters - {characters: toIds}
     * @esi_returns cost
     * @esi_example esi.characters(1, 'token').mail.cspaCost()
     *
     * @param toIds {Array.<Number>}
     * @returns {Promise.<Number>}
     */

  }, {
    key: 'cspaCost',
    value: function cspaCost(toIds) {
      return this._agent.auth(this._token).post('/v3/characters/{character_id}/cspa/', {
        path: { 'character_id': this._id },
        body: { 'characters': toIds }
      }).then(function (result) {
        return result.cost;
      });
    }

    /**
     * @esi_route get_characters_character_id_mail
     * @esi_param labels - labelIds
     * @esi_example esi.characters(1, 'token').mail()
     *
     * @param labelIds {Array.<Number>} If empty, no filtering is performed.
     * @param lastMailId {Number} If `0`, the most recent mails are returned.
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'inbox',
    value: function inbox() {
      var labelIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var lastMailId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      var opts = {};
      if (labelIds) {
        opts['labels'] = labelIds;
      }
      if (lastMailId) {
        opts['last_mail_id'] = lastMailId;
      }

      return this._agent.auth(this._token).get('/v1/characters/{character_id}/mail/', {
        path: { 'character_id': this._id },
        query: {
          'labels': !labelIds || labelIds.length == 0 ? null : labelIds,
          'last_mail_id': lastMailId == 0 ? null : lastMailId
        }
      });
    }
  }, {
    key: 'all',


    /**
     * Fetch all mails for the character as a single array. This makes multiple
     * calls to {@link Mail.inbox inbox}. Use with caution as certain characters
     * could have substantial amounts of mail.
     *
     * @returns {Promise.<Array.<Object>>}
     */
    value: function all() {
      return this._all.getAll();
    }

    /**
     * @esi_route post_characters_character_id_mail
     * @esi_example esi.characters(1, 'token').mail.send({...})
     *
     * @param {Object} mail The mail descriptor
     * @return {Promise.<Number>}
     */

  }, {
    key: 'send',
    value: function send(mail) {
      return this._agent.auth(this._token).post('/v1/characters/{character_id}/mail/', {
        path: { 'character_id': this._id },
        body: mail
      });
    }

    /**
     * @esi_route get_characters_character_id_mail_lists
     * @esi_example esi.characters(1, 'token').mail.lists()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'lists',
    value: function lists() {
      return this._agent.auth(this._token).get('/v1/characters/{character_id}/mail/lists/', { path: { 'character_id': this._id } });
    }
  }, {
    key: 'labels',
    get: function get() {
      if (!this._labels) {
        this._labels = new Labels(this);
      }
      return this._labels;
    }
  }]);
  return Mail;
}(CallableInstance);

module.exports = Mail;