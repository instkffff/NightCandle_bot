'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CallableInstance = require('../../internal/callable-instance');

/**
 * An api adapter that provides functions for removing a particular fitting of a
 * character, specified by id via functions in the
 * [fittings](https://esi.tech.ccp.is/latest/#/Fittings) ESI endpoints.
 *
 * You should not usually instantiate this directly as its constructor requires
 * an internal api instance.
 */

var Fitting = function () {
  /**
   * Create a new Fitting represented as `fittingId` from the given `fittings`.
   *
   * @param fittings {Fittings} The fittings owning the fit
   * @param fittingId {Number} The fitting id that is used for all requests
   * @constructor
   */
  function Fitting(fittings, fittingId) {
    (0, _classCallCheck3.default)(this, Fitting);

    this._fit = fittings;
    this._id = fittingId;
  }

  /**
   * @esi_route delete_characters_character_id_fittings_fitting_id
   * @esi_example esi.characters(1, 'token').fittings(2).del()
   *
   * @returns {Promise.<Object>}
   */


  (0, _createClass3.default)(Fitting, [{
    key: 'del',
    value: function del() {
      return this._fit._agent.auth(this._fit._token).del('/v1/characters/{character_id}/fittings/{fitting_id}/', {
        path: {
          'character_id': this._fit._id,
          'fitting_id': this._id
        }
      });
    }
  }]);
  return Fitting;
}();

/**
 * An api adapter over the end points handling a character's fittings via
 * functions in the [fittings](https://esi.tech.ccp.is/latest/#/Fittings) ESI
 * endpoints. You should not usually instantiate this directly as its
 * constructor requires an internal api instance.
 *
 * This is a function class so instances of `Fittings` are functions and can be
 * invoked directly, besides accessing its members. Its default function action
 * is equivalent to {@link Fittings#get get} or {@link Fittings#all all} if no
 * id is provided.
 */


var Fittings = function (_CallableInstance) {
  (0, _inherits3.default)(Fittings, _CallableInstance);

  /**
   * Create a new Fittings function using the given `agent`, for the
   * character described by `characterId` with SSO access from `token`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @param characterId {Number} The character id whose fittings are accessed
   * @param token {String} The SSO access token for the character
   * @constructor
   */
  function Fittings(agent, characterId, token) {
    (0, _classCallCheck3.default)(this, Fittings);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Fittings.__proto__ || (0, _getPrototypeOf2.default)(Fittings)).call(this, function (id) {
      return id ? _this.get(id) : _this.all();
    }));

    _this._agent = agent;
    _this._id = characterId;
    _this._token = token;
    return _this;
  }

  /**
   * @esi_route get_characters_character_id_fittings
   * @esi_example esi.characters(1, 'token').fittings()
   *
   * @returns {Promise.<Array.<Object>>}
   */


  (0, _createClass3.default)(Fittings, [{
    key: 'all',
    value: function all() {
      return this._agent.auth(this._token).get('/v1/characters/{character_id}/fittings/', { path: { 'character_id': this._id } });
    }

    /**
     * @esi_route post_characters_character_id_fittings
     * @esi_returns id:fitting_id
     * @esi_example esi.characters(1, 'token').fittings.add({...})
     *
     * @param fitting {Object}
     * @returns {Promise.<Number>}
     */

  }, {
    key: 'add',
    value: function add(fitting) {
      return this._agent.auth(this._token).post('/v1/characters/{character_id}/fittings/', {
        path: { 'character_id': this._id },
        body: fitting
      }).then(function (result) {
        return result.fitting_id;
      });
    }

    /**
     * Create a new Fitting end point targeting the particular fitting by
     * `id`.
     *
     * @param id {Number} The fitting id
     * @returns {Fitting}
     */

  }, {
    key: 'get',
    value: function get(id) {
      return new Fitting(this, id);
    }
  }]);
  return Fittings;
}(CallableInstance);

module.exports = Fittings;