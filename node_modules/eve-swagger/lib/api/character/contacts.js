'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CallableInstance = require('../../internal/callable-instance');

var _require = require('../../internal/page-handler'),
    _require2 = (0, _slicedToArray3.default)(_require, 1),
    PageHandler = _require2[0];

/**
 * An api adapter that provides functions for modifying and removing a
 * particular contact of a character, specified by id via functions in the
 * [contacts](https://esi.tech.ccp.is/latest/#/Contacts) ESI endpoints.
 *
 * You should not usually instantiate this directly as its constructor requires
 * an internal api instance.
 */


var Contact = function () {
  /**
   * Create a new Contact represented as `contactId` from the given `contacts`.
   *
   * @param contacts {Contacts} The contacts owning the contact
   * @param contactId {Number} The contact id that is used for all requests
   * @constructor
   */
  function Contact(contacts, contactId) {
    (0, _classCallCheck3.default)(this, Contact);

    this._contacts = contacts;
    this._id = contactId;
  }

  /**
   * @esi_route delete_characters_character_id_contacts
   * @esi_param !contact_ids
   * @esi_example esi.characters(1, 'token').contacts(2).del()
   *
   * @returns {Promise.<Object>}
   */


  (0, _createClass3.default)(Contact, [{
    key: 'del',
    value: function del() {
      return this._contacts._agent.auth(this._contacts._token).del('/v1/characters/{character_id}/contacts/', {
        path: { 'character_id': this._contacts._id },
        body: [this._id]
      });
    }
  }, {
    key: '_updateContact',
    value: function _updateContact(standing, label, watched) {
      return this._contacts._agent.auth(this._contacts._token).put('/v1/characters/{character_id}/contacts/', {
        path: { 'character_id': this._contacts._id },
        query: {
          'label_id': label,
          'standing': standing,
          'watched': watched
        },
        body: [this._id]
      });
    }

    /**
     * @esi_route put_characters_character_id_contacts
     * @esi_param watched - false
     * @esi_param !contact_ids
     * @esi_param label_id - label
     *
     * @esi_example esi.characters(1, 'token').contacts(2).update({...})
     *
     * @param standing {Number}
     * @param label {Number}
     *
     * @returns {Promise.<Object>}
     */

  }, {
    key: 'update',
    value: function update(_ref) {
      var standing = _ref.standing,
          _ref$label = _ref.label,
          label = _ref$label === undefined ? 0 : _ref$label;

      return this._updateContact(standing, label, false);
    }

    /**
     * @esi_route put_characters_character_id_contacts
     * @esi_param watched - true
     * @esi_param !contact_ids
     * @esi_param label_id - label
     *
     * @esi_example esi.characters(1, 'token').contacts(2).updateWatched({...})
     *
     * @param standing {Number}
     * @param label {Number}
     *
     * @returns {Promise.<Object>}
     */

  }, {
    key: 'updateWatched',
    value: function updateWatched(_ref2) {
      var standing = _ref2.standing,
          _ref2$label = _ref2.label,
          label = _ref2$label === undefined ? 0 : _ref2$label;

      return this._updateContact(standing, label, true);
    }
  }]);
  return Contact;
}();

/**
 * An api adapter over the end points handling a character's contacts via
 * functions in the [contacts](https://esi.tech.ccp.is/latest/#/Contacts)
 * ESI endpoints. You should not usually instantiate this directly as its
 * constructor requires an internal api instance.
 *
 * This is a function class so instances of `Contacts` are functions and can be
 * invoked directly, besides accessing its members. Its default function action
 * is equivalent to {@link Contacts#get get} or {@link Contacts#all all} if no
 * id is provided.
 */


var Contacts = function (_CallableInstance) {
  (0, _inherits3.default)(Contacts, _CallableInstance);

  /**
   * Create a new Contacts function using the given `agent`, for the
   * character described by `characterId` with SSO access from `token`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @param characterId {Number} The character id whose contacts are accessed
   * @param token {String} The SSO access token for the character
   * @constructor
   */
  function Contacts(agent, characterId, token) {
    (0, _classCallCheck3.default)(this, Contacts);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Contacts.__proto__ || (0, _getPrototypeOf2.default)(Contacts)).call(this, function (id) {
      return id ? _this.get(id) : _this.all();
    }));

    _this._agent = agent;
    _this._id = characterId;
    _this._token = token;
    _this._all = new PageHandler(function (page) {
      return _this.all(page);
    });
    return _this;
  }

  /**
   * @esi_route get_characters_character_id_contacts
   * @esi_example esi.characters(1, 'token').contacts()
   *
   * @param page {Number} If `0`, all pages are returned, concatenated into a
   *     single array.
   * @returns {Promise.<Array.<Object>>}
   */


  (0, _createClass3.default)(Contacts, [{
    key: 'all',
    value: function all() {
      var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (page == 0) {
        return this._all.getAll();
      } else {
        return this._agent.auth(this._token).get('/v1/characters/{character_id}/contacts/', {
          path: { 'character_id': this._id },
          query: { 'page': page }
        });
      }
    }

    /**
     * @esi_route get_characters_character_id_contacts_labels
     * @esi_example esi.characters(1, 'token').contacts.labels()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'labels',
    value: function labels() {
      return this._agent.auth(this._token).get('/v1/characters/{character_id}/contacts/labels/', { path: { 'character_id': this._id } });
    }
  }, {
    key: '_createContacts',
    value: function _createContacts(contacts, standing, label, watched) {
      return this._agent.auth(this._token).post('/v1/characters/{character_id}/contacts/', {
        path: { 'character_id': this._id },
        query: {
          'label_id': label,
          'standing': standing,
          'watched': watched
        },
        body: contacts
      });
    }
  }, {
    key: 'add',


    /**
     * @esi_route post_characters_character_id_contacts
     * @esi_param watched - false
     * @esi_param label_id - label
     * @esi_param contact_ids - ids
     *
     * @esi_example esi.characters(1, 'token').contacts.add({...})
     *
     * @param ids {Array.<Number>}
     * @param standing {Number}
     * @param label {Number}
     *
     * @returns {Promise.<Array.<Number>>}
     */
    value: function add(_ref3) {
      var ids = _ref3.ids,
          standing = _ref3.standing,
          _ref3$label = _ref3.label,
          label = _ref3$label === undefined ? 0 : _ref3$label;

      return this._createContacts(ids, standing, label, false);
    }

    /**
     * @esi_route post_characters_character_id_contacts
     * @esi_param watched - true
     * @esi_param label_id - label
     * @esi_param contact_ids - ids
     *
     * @esi_example esi.characters(1, 'token').contacts.addWatched({...})
     *
     * @param ids {Array.<Number>}
     * @param standing {Number}
     * @param label {Number}
     *
     * @returns {Promise.<Array.<Number>>}
     */

  }, {
    key: 'addWatched',
    value: function addWatched(_ref4) {
      var ids = _ref4.ids,
          standing = _ref4.standing,
          _ref4$label = _ref4.label,
          label = _ref4$label === undefined ? 0 : _ref4$label;

      return this._createContacts(ids, standing, label, true);
    }

    /**
     * Create a new Contact end point targeting the particular contact by
     * `id`.
     *
     * @param id {Number} The contact id
     * @returns {Contact}
     */

  }, {
    key: 'get',
    value: function get(id) {
      return new Contact(this, id);
    }
  }]);
  return Contacts;
}(CallableInstance);

module.exports = Contacts;