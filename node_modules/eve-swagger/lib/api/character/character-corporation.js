'use strict';

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Promise = require('bluebird');

var _require = require('../../internal/page-handler'),
    _require2 = (0, _slicedToArray3.default)(_require, 1),
    PageHandler = _require2[0];

/**
 * An api adapter that provides functions for accessing various details for a
 * corporation specified by id via functions in the
 * [corporation](https://esi.tech.ccp.is/latest/#/Corporation) ESI endpoints.
 * Unlike {@link Corporation}, his only includes all corporation end points,
 * including those requiring access tokens. Additionally, this corporation
 * adapter is attached to a character so it always reports information on the
 * character's corporation.
 *
 * You should not usually instantiate this directly as its constructor requires
 * an internal api instance.
 */


var CharacterCorporation = function () {
  /**
   * Create a new corporation agent adapter for the particular character's
   * corporation.
   *
   * @param agent {ESIAgent} The ESI agent
   * @param characterId {Number} The character this is linked to
   * @param token {String} The SSO access token for the character
   */
  function CharacterCorporation(agent, characterId, token) {
    var _this = this;

    (0, _classCallCheck3.default)(this, CharacterCorporation);

    this._agent = agent;
    this._charId = characterId;
    this._token = token;
    this._id = null;
    this._allStructs = new PageHandler(function (page) {
      return _this.structures(page);
    }, 250);
  }

  /**
   * @esi_route get_corporations_corporation_id
   *
   * Note that this is equivalent to {@link Corporation#info}.
   *
   * @esi_example esi.characters(1, 'token').corporation.info()
   *
   * @returns {Promise.<Object>}
   */


  (0, _createClass3.default)(CharacterCorporation, [{
    key: 'info',
    value: function info() {
      var _this2 = this;

      return this.id().then(function (corpId) {
        return _this2._agent.noAuth.get('/v3/corporations/{corporation_id}/', { path: { 'corporation_id': corpId } });
      });
    }

    /**
     * @esi_route get_corporations_corporation_id_alliancehistory
     *
     * Note that this is equivalent to {@link Corporation#history}.
     *
     * @esi_example esi.characters(1, 'token').corporation.history()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'history',
    value: function history() {
      var _this3 = this;

      return this.id().then(function (corpId) {
        return _this3._agent.noAuth.get('/v1/corporations/{corporation_id}/alliancehistory/', { path: { 'corporation_id': corpId } });
      });
    }

    /**
     * @esi_route get_corporations_corporation_id_icons
     *
     * Note that this is equivalent to {@link Corporation#icon}
     *
     * @esi_example esi.characters(1, 'token').corporation.icon()
     *
     * @returns {Promise.<Object>}
     */

  }, {
    key: 'icon',
    value: function icon() {
      var _this4 = this;

      return this.id().then(function (corpId) {
        return _this4._agent.noAuth.get('/v1/corporations/{corporation_id}/icons/', { path: { 'corporation_id': corpId } });
      });
    }

    /**
     * @esi_route get_loyalty_stores_corporation_id_offers
     *
     * Note that this is equivalent to {@link Corporation#loyaltyOffers}
     *
     * @esi_example esi.characters(1, 'token').corporation.loyaltyOffers()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'loyaltyOffers',
    value: function loyaltyOffers() {
      var _this5 = this;

      return this.id().then(function (corpId) {
        return _this5._agent.noAuth.get('/v1/loyalty/stores/{corporation_id}/offers/', { path: { 'corporation_id': corpId } });
      });
    }

    /**
     * @esi_route get_corporations_corporation_id_members
     * @esi_returns character_id
     * @esi_example esi.characters(1, 'token').corporation.members()
     *
     * @returns {Promise.<Array.<Number>>}
     */

  }, {
    key: 'members',
    value: function members() {
      var _this6 = this;

      return this.id().then(function (corpId) {
        return _this6._agent.auth(_this6._token).get('/v2/corporations/{corporation_id}/members/', { path: { 'corporation_id': corpId } });
      }).then(function (result) {
        return result.map(function (e) {
          return e.character_id;
        });
      });
    }

    /**
     * @esi_route get_corporations_corporation_id_roles
     * @esi_example esi.characters(1, 'token').corporation.roles()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'roles',
    value: function roles() {
      var _this7 = this;

      return this.id().then(function (corpId) {
        return _this7._agent.auth(_this7._token).get('/v1/corporations/{corporation_id}/roles/', { path: { 'corporation_id': corpId } });
      });
    }

    /**
     * @esi_route get_corporations_corporation_id_structures
     * @esi_example esi.characters(1, 'token').corporation.structures()
     *
     * @param page {Number} If `0`, all structures are returned
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'structures',
    value: function structures() {
      var _this8 = this;

      var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (page == 0) {
        return this._allStructs.getAll();
      } else {
        return this.id().then(function (corpId) {
          return _this8._agent.auth(_this8._token).get('/v1/corporations/{corporation_id}/structures/', {
            path: { 'corporation_id': corpId },
            query: { 'page': page }
          });
        });
      }
    }

    /**
     * Get the corporation id of the corp that the character belongs to.
     *
     * @returns {Promise.<Number>} A Promise that resolves to the character's
     *     corporation id
     */

  }, {
    key: 'id',
    value: function id() {
      var _this9 = this;

      if (this._id) {
        return Promise.resolve(this._id);
      } else {
        return this._agent.noAuth.get('/v4/characters/{character_id}/', { path: { 'character_id': this._charId } }).then(function (result) {
          var id = result.corporation_id;
          _this9._id = id;
          return id;
        });
      }
    }
  }]);
  return CharacterCorporation;
}();

module.exports = CharacterCorporation;