'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Promise = require('bluebird');

var CallableInstance = require('../internal/callable-instance');

var _require = require('../internal/page-handler'),
    _require2 = (0, _slicedToArray3.default)(_require, 1),
    PageHandler = _require2[0];

var Killmail = require('./killmail');

/**
 * An api adapter that provides functions for accessing various details for an
 * war specified by id, via functions in the
 * [wars](https://esi.tech.ccp.is/latest/#/Wars) ESI endpoints. You should not
 * usually instantiate this directly as its constructor requires an internal api
 * instance.
 */

var War = function () {
  /**
   * Create a new War for the given `agent` provider and specific
   * `warId`.
   *
   * @param agent {ESIAgent} The ESI agent used to generate web requests
   * @param warId {Number} The war id that is used for all requests
   * @constructor
   */
  function War(agent, warId) {
    var _this = this;

    (0, _classCallCheck3.default)(this, War);

    this._agent = agent;
    this._id = warId;
    this._kills = null;
    this._allKills = new PageHandler(function (page) {
      return _this._fetchKills(page);
    }, 2000);
    this._allMails = new PageHandler(function (page) {
      return _this._fetchMails(page);
    }, 2000);
  }

  /**
   * @esi_route get_wars_war_id
   * @esi_example esi.wars(1).info()
   *
   * @return {Promise.<Object>} A Promise that resolves to the response of
   *   the request
   */


  (0, _createClass3.default)(War, [{
    key: 'info',
    value: function info() {
      return this._agent.noAuth.get('/v1/wars/{war_id}/', { path: { 'war_id': this._id } });
    }

    /**
     * Get the kill details for the war's {@link War#killmails
     * killmails} and then uses {@link Killmail#get} to map the details.
     * The request resolves to an array, each containing a killmail detail.
     *
     * @esi_example esi.wars(1).kills() ~ get_wars_war_id_killmails
     *
     * @param page {Number} Optional; the page of killmails to fetch, starting
     *     with page 1. If not provided then all kills are returned.
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'kills',
    value: function kills() {
      var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (page == 0) {
        return this._allKills.getAll();
      } else {
        return this._fetchKills(page);
      }
    }
  }, {
    key: '_fetchKills',
    value: function _fetchKills(page) {
      var _this2 = this;

      if (this._kills == null) {
        this._kills = new Killmail(this._agent);
      }

      return this.killmails(page).then(function (kms) {
        return Promise.map(kms, function (km) {
          return _this2._kills.get(km.killmail_id, km.killmail_hash);
        });
      });
    }

    /**
     * @esi_route get_wars_war_id_killmails
     * @esi_example esi.wars(1).killmails()
     *
     * @param page {Number} If 0, then all pages are fetched and concatenated
     *     together
     * @return {Promise.<Array.<Object>>}
     * @see Killmail#get
     */

  }, {
    key: 'killmails',
    value: function killmails() {
      var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (page == 0) {
        return this._allMails.getAll();
      } else {
        return this._fetchMails(page);
      }
    }
  }, {
    key: '_fetchMails',
    value: function _fetchMails(page) {
      return this._agent.noAuth.get('/v1/wars/{war_id}/killmails/', {
        path: { 'war_id': this._id },
        query: { 'page': page }
      });
    }
  }]);
  return War;
}();

/**
 * An api adapter over the end points handling multiple wars via functions in
 * the [wars](https://esi.tech.ccp.is/latest/#/Wars) ESI endpoints. You should
 * not usually instantiate this directly as its constructor requires an internal
 * api instance.
 *
 * This is a function class so instances of `Wars` are functions and can be
 * invoked directly, besides accessing its members. Its default function action
 * is equivalent to {@link Wars#get get} or {@link Wars#recent recent} if no id
 * is provided.
 */


var Wars = function (_CallableInstance) {
  (0, _inherits3.default)(Wars, _CallableInstance);

  /**
   * Create a new Wars function using the given `agent`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @constructor
   */
  function Wars(agent) {
    (0, _classCallCheck3.default)(this, Wars);

    var _this3 = (0, _possibleConstructorReturn3.default)(this, (Wars.__proto__ || (0, _getPrototypeOf2.default)(Wars)).call(this, function (id) {
      return id ? _this3.get(id) : _this3.recent();
    }));

    _this3._agent = agent;
    return _this3;
  }

  /**
   * Create a new War end point targeting the particular war by `id`.
   *
   * @param id {Number} The war id
   * @returns {War}
   */


  (0, _createClass3.default)(Wars, [{
    key: 'get',
    value: function get(id) {
      return new War(this._agent, id);
    }

    /**
     * @esi_route get_wars
     * @esi_param max_war_id - maxId
     * @esi_example esi.wars.recent()
     *
     * @param maxId {Number} If not provided (or 0), the newest wars are returned
     * @return {Promise.<Array.<Number>>}
     */

  }, {
    key: 'recent',
    value: function recent() {
      var maxId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      return this._agent.noAuth.get('/v1/wars/', { query: { 'max_war_id': maxId == 0 ? null : maxId } });
    }
  }]);
  return Wars;
}(CallableInstance);

module.exports = Wars;