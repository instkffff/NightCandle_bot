'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CallableInstance = require('../../internal/callable-instance');

/**
 * An api adapter that provides functions for accessing a particular dogma
 * attribute, specified by id via functions in the
 * [dogma](https://esi.tech.ccp.is/latest/#/Dogma) ESI endpoints.
 *
 * You should not usually instantiate this directly as its constructor requires
 * an internal api instance.
 */

var Attribute = function () {
  /**
   * Create a new Attribute identified as `attrId`.
   *
   * @param agent {ESIAgent} The ESI agent used to make web requests
   * @param attrId {Number} The attribute id used in all requests
   * @constructor
   */
  function Attribute(agent, attrId) {
    (0, _classCallCheck3.default)(this, Attribute);

    this._agent = agent;
    this._id = attrId;
  }

  /**
   * @esi_route get_dogma_attributes_attribute_id
   * @esi_example esi.dogma.attributes(1).info()
   *
   * @returns {Promise.<Object>}
   */


  (0, _createClass3.default)(Attribute, [{
    key: 'info',
    value: function info() {
      return this._agent.noAuth.get('/v1/dogma/attributes/{attribute_id}/', { path: { 'attribute_id': this._id } });
    }
  }]);
  return Attribute;
}();

/**
 * An api adapter over the end points handling multiple dogma attributes via
 * functions in the [dogma](https://esi.tech.ccp.is/latest/#/Dogma)
 * ESI endpoints. You should not usually instantiate this directly as its
 * constructor requires an internal api instance.
 *
 * This is a function class so instances of `Attributes` are functions and can
 * be invoked directly, besides accessing its members. Its default function
 * action is equivalent to {@link Attributes#get get} or {@link Attributes#all
 * all} depending on if an id is provided.
 */


var Attributes = function (_CallableInstance) {
  (0, _inherits3.default)(Attributes, _CallableInstance);

  /**
   * Create a new Attributes function using the given `agent`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @constructor
   */
  function Attributes(agent) {
    (0, _classCallCheck3.default)(this, Attributes);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Attributes.__proto__ || (0, _getPrototypeOf2.default)(Attributes)).call(this, function (id) {
      return id ? _this.get(id) : _this.all();
    }));

    _this._agent = agent;
    return _this;
  }

  /**
   * Create a new Attribute end point targeting the particular attribute by
   * `id`.
   *
   * @param id {Number} The attribute id
   * @returns {Attribute}
   */


  (0, _createClass3.default)(Attributes, [{
    key: 'get',
    value: function get(id) {
      return new Attribute(this._agent, id);
    }

    /**
     * @esi_route get_dogma_attributes
     * @esi_example esi.dogma.attributes()
     *
     * @returns {Promise.<Array.<Number>>}
     */

  }, {
    key: 'all',
    value: function all() {
      return this._agent.noAuth.get('/v1/dogma/attributes/');
    }
  }]);
  return Attributes;
}(CallableInstance);

/**
 * An api adapter that provides functions for accessing a particular dogma
 * effect, specified by id via functions in the
 * [dogma](https://esi.tech.ccp.is/latest/#/Dogma) ESI endpoints.
 *
 * You should not usually instantiate this directly as its constructor requires
 * an internal api instance.
 */


var Effect = function () {
  /**
   * Create a new Effect identified as `effectId`.
   *
   * @param agent {ESIAgent} The ESI agent used to make web requests
   * @param effectId {Number} The effect id used in all requests
   * @constructor
   */
  function Effect(agent, effectId) {
    (0, _classCallCheck3.default)(this, Effect);

    this._agent = agent;
    this._id = effectId;
  }

  /**
   * @esi_route get_dogma_effects_effect_id
   * @esi_example esi.dogma.effects(1).info()
   *
   * @returns {Promise.<Object>}
   */


  (0, _createClass3.default)(Effect, [{
    key: 'info',
    value: function info() {
      return this._agent.noAuth.get('/v1/dogma/effects/{effect_id}/', { path: { 'effect_id': this._id } });
    }
  }]);
  return Effect;
}();

/**
 * An api adapter over the end points handling multiple dogma effects via
 * functions in the [dogma](https://esi.tech.ccp.is/latest/#/Dogma)
 * ESI endpoints. You should not usually instantiate this directly as its
 * constructor requires an internal api instance.
 *
 * This is a function class so instances of `Effects` are functions and can
 * be invoked directly, besides accessing its members. Its default function
 * action is equivalent to {@link Effects#get get} or {@link Effects#all
 * all} depending on if an id is provided.
 */


var Effects = function (_CallableInstance2) {
  (0, _inherits3.default)(Effects, _CallableInstance2);

  /**
   * Create a new Effects function using the given `agent`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @constructor
   */
  function Effects(agent) {
    (0, _classCallCheck3.default)(this, Effects);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (Effects.__proto__ || (0, _getPrototypeOf2.default)(Effects)).call(this, function (id) {
      return id ? _this2.get(id) : _this2.all();
    }));

    _this2._agent = agent;
    return _this2;
  }

  /**
   * Create a new Effect end point targeting the particular effect by `id`.
   *
   * @param id {Number} The effect id
   * @returns {Effect}
   */


  (0, _createClass3.default)(Effects, [{
    key: 'get',
    value: function get(id) {
      return new Effect(this._agent, id);
    }

    /**
     * @esi_route get_dogma_effects
     * @esi_example esi.dogma.effects()
     *
     * @returns {Promise.<Array.<Number>>}
     */

  }, {
    key: 'all',
    value: function all() {
      return this._agent.noAuth.get('/v1/dogma/effects/');
    }
  }]);
  return Effects;
}(CallableInstance);

/**
 * An api adapter over the end points accessing dogma effects and attributes via
 * functions in the [dogma](https://esi.tech.ccp.is/latest/#/Dogma) ESI
 * endpoints. You should not usually instantiate this directly as its
 * constructor requires an internal api instance.
 */


var Dogma = function () {
  /**
   * Create a new Dogma end point using the given `agent`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @constructor
   */
  function Dogma(agent) {
    (0, _classCallCheck3.default)(this, Dogma);

    this._agent = agent;
    this._attrs = null;
    this._effects = null;
  }

  /**
   * An instance of Attributes for all dogma attributes.
   *
   * @type {Attributes}
   */


  (0, _createClass3.default)(Dogma, [{
    key: 'attributes',
    get: function get() {
      if (!this._attrs) {
        this._attrs = new Attributes(this._agent);
      }
      return this._attrs;
    }

    /**
     * An instance of Effects for all dogma effects.
     *
     * @type {Effects}
     */

  }, {
    key: 'effects',
    get: function get() {
      if (!this._effects) {
        this._effects = new Effects(this._agent);
      }
      return this._effects;
    }
  }]);
  return Dogma;
}();

module.exports = Dogma;