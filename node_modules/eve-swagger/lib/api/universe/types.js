'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CallableInstance = require('../../internal/callable-instance');

var _require = require('../../internal/page-handler'),
    _require2 = (0, _slicedToArray3.default)(_require, 1),
    PageHandler = _require2[0];

var Search = require('../search');

var _names = require('../../internal/names');

/**
 * An api adapter for dealing with a single item group, currently only
 * supporting fetching simple information.
 */

var Group = function () {
  /**
   * Create a new Group for the given `agent` provider and specific `groupId`.
   *
   * @param agent {ESIAgent} The agent used to generate web requests
   * @param groupId {Number} The group id that is used for all requests
   * @constructor
   */
  function Group(agent, groupId) {
    (0, _classCallCheck3.default)(this, Group);

    this._agent = agent;
    this._id = groupId;
  }

  /**
   * @esi_route get_universe_groups_group_id
   * @esi_example esi.types.groups(1).info()
   *
   * @return {Promise.<Object>}
   */


  (0, _createClass3.default)(Group, [{
    key: 'info',
    value: function info() {
      return this._agent.noAuth.get('/v1/universe/groups/{group_id}/', { path: { 'group_id': this._id } });
    }
  }]);
  return Group;
}();

/**
 * An api adapter that provides functions for accessing item group information
 * via the [universe](https://esi.tech.ccp.is/latest/#/Universe) ESI end points.
 * You should not usually instantiate this directly as its constructor requires
 * an internal api instance.
 *
 * This is a function class so instances of `Groups` are functions and can be
 * invoked directly, besides accessing its members. Its default function action
 * is equivalent to {@link Groups#get get} or {@link Groups#all all} if no id is
 * provided.
 */


var Groups = function (_CallableInstance) {
  (0, _inherits3.default)(Groups, _CallableInstance);

  /**
   * Create a new Groups instance using the given `agent`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @constructor
   */
  function Groups(agent) {
    (0, _classCallCheck3.default)(this, Groups);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Groups.__proto__ || (0, _getPrototypeOf2.default)(Groups)).call(this, function (id) {
      return id ? _this.get(id) : _this.all();
    }));

    _this._agent = agent;
    _this._all = new PageHandler(function (page) {
      return _this.all(page);
    });
    return _this;
  }

  /**
   * Create a new Group end point targeting the particular group by `id`.
   *
   * @param id {Number} The group id
   * @returns {Group}
   */


  (0, _createClass3.default)(Groups, [{
    key: 'get',
    value: function get(id) {
      return new Group(this._agent, id);
    }

    /**
     * @esi_route get_universe_groups
     * @esi_example esi.types.groups()
     *
     * @param page {Number} If 0, then all pages are returned concatenated into a
     *     single array.
     * @return {Promise.<Array.<Number>>}
     */

  }, {
    key: 'all',
    value: function all() {
      var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (page == 0) {
        return this._all.getAll();
      } else {
        return this._agent.noAuth.get('/v1/universe/groups/', { query: { 'page': page } });
      }
    }
  }]);
  return Groups;
}(CallableInstance);

/**
 * An api adapter for dealing with a single market group, currently only
 * supporting fetching simple information.
 */


var MarketGroup = function () {
  /**
   * Create a new MarketGroup for the given `agent` provider and specific
   * `groupId`.
   *
   * @param agent {ESIAgent} The agent used to generate web requests
   * @param groupId {Number} The group id that is used for all requests
   * @constructor
   */
  function MarketGroup(agent, groupId) {
    (0, _classCallCheck3.default)(this, MarketGroup);

    this._agent = agent;
    this._id = groupId;
  }

  /**
   * @esi_route get_markets_groups_market_group_id
   * @esi_example esi.types.marketGroups(1).info()
   *
   * @return {Promise.<Object>}
   */


  (0, _createClass3.default)(MarketGroup, [{
    key: 'info',
    value: function info() {
      return this._agent.noAuth.get('/v1/markets/groups/{market_group_id}/', { path: { 'market_group_id': this._id } });
    }
  }]);
  return MarketGroup;
}();

/**
 * An api adapter that provides functions for accessing market group information
 * via the [market](https://esi.tech.ccp.is/latest/#/Market) ESI end points.
 * You should not usually instantiate this directly as its constructor requires
 * an internal api instance.
 *
 * This is a function class so instances of `MarketGroups` are functions and can
 * be invoked directly, besides accessing its members. Its default function
 * action is equivalent to {@link MarketGroups#get get} or {@link
    * MarketGroups#all all} if no id is provided.
 */


var MarketGroups = function (_CallableInstance2) {
  (0, _inherits3.default)(MarketGroups, _CallableInstance2);

  /**
   * Create a new Groups instance using the given `agent`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @constructor
   */
  function MarketGroups(agent) {
    (0, _classCallCheck3.default)(this, MarketGroups);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (MarketGroups.__proto__ || (0, _getPrototypeOf2.default)(MarketGroups)).call(this, function (id) {
      return id ? _this2.get(id) : _this2.all();
    }));

    _this2._agent = agent;
    return _this2;
  }

  /**
   * Create a new MarketGroup end point targeting the particular group by `id`.
   *
   * @param id {Number} The group id
   * @returns {MarketGroup}
   */


  (0, _createClass3.default)(MarketGroups, [{
    key: 'get',
    value: function get(id) {
      return new MarketGroup(this._agent, id);
    }

    /**
     * @esi_route get_markets_groups
     * @esi_example esi.types.marketGroups()
     *
     * @return {Promise.<Array.<Number>>}
     */

  }, {
    key: 'all',
    value: function all() {
      return this._agent.noAuth.get('/v1/markets/groups/');
    }
  }]);
  return MarketGroups;
}(CallableInstance);

/**
 * An api adapter for dealing with a single item category, currently only
 * supporting fetching simple information.
 */


var Category = function () {
  /**
   * Create a new Category for the given `agent` provider and specific
   * `categoryId`.
   *
   * @param agent {ESIAgent} The agent used to generate web requests
   * @param categoryId {Number} The category id that is used for all requests
   * @constructor
   */
  function Category(agent, categoryId) {
    (0, _classCallCheck3.default)(this, Category);

    this._agent = agent;
    this._id = categoryId;
  }

  /**
   * @esi_route get_universe_categories_category_id
   * @esi_example esi.types.categories(1).info()
   *
   * @return {Promise.<Object>}
   */


  (0, _createClass3.default)(Category, [{
    key: 'info',
    value: function info() {
      return this._agent.noAuth.get('/v1/universe/categories/{category_id}/', { path: { 'category_id': this._id } });
    }
  }]);
  return Category;
}();

/**
 * An api adapter that provides functions for accessing item category
 * information via the [universe](https://esi.tech.ccp.is/latest/#/Universe) ESI
 * end points. You should not usually instantiate this directly as its
 * constructor requires an internal api instance.
 *
 * This is a function class so instances of `Categories` are functions and can
 * be invoked directly, besides accessing its members. Its default function
 * action is equivalent to {@link Categories#get get} or {@link Categories#all
 * all} if no id is provided.
 */


var Categories = function (_CallableInstance3) {
  (0, _inherits3.default)(Categories, _CallableInstance3);

  /**
   * Create a new Categories instance using the given `agent`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @constructor
   */
  function Categories(agent) {
    (0, _classCallCheck3.default)(this, Categories);

    var _this3 = (0, _possibleConstructorReturn3.default)(this, (Categories.__proto__ || (0, _getPrototypeOf2.default)(Categories)).call(this, function (id) {
      return id ? _this3.get(id) : _this3.all();
    }));

    _this3._agent = agent;
    return _this3;
  }

  /**
   * Create a new Category end point targeting the particular category by `id`.
   *
   * @param id {Number} The category id
   * @returns {Category}
   */


  (0, _createClass3.default)(Categories, [{
    key: 'get',
    value: function get(id) {
      return new Category(this._agent, id);
    }

    /**
     * @esi_route get_universe_categories
     * @esi_example esi.types.categories()
     *
     * @return {Promise.<Array.<Number>>}
     */

  }, {
    key: 'all',
    value: function all() {
      return this._agent.noAuth.get('/v1/universe/categories/');
    }
  }]);
  return Categories;
}(CallableInstance);

/**
 * An api adapter for dealing with a single item type, currently only supporting
 * fetching simple information.
 */


var Type = function () {
  /**
   * Create a new Type for the given `agent` provider and specific
   * `typeId`.
   *
   * @param agent {ESIAgent} The agent used to generate web requests
   * @param typeId {Number} The type id that is used for all requests
   * @constructor
   */
  function Type(agent, typeId) {
    (0, _classCallCheck3.default)(this, Type);

    this._agent = agent;
    this._id = typeId;
  }

  /**
   * @esi_route get_universe_types_type_id
   * @esi_example esi.types(1).info()
   *
   * @return {Promise.<Object>}
   */


  (0, _createClass3.default)(Type, [{
    key: 'info',
    value: function info() {
      return this._agent.noAuth.get('/v2/universe/types/{type_id}/', { path: { 'type_id': this._id } });
    }
  }]);
  return Type;
}();

/**
 * An api adapter that provides functions for accessing item type information
 * via the
 * [universe](https://esi.tech.ccp.is/latest/#/Universe) and
 * [search](https://esi.tech.ccp.is/latest/#/Search) ESI end points.
 * You should not usually instantiate this directly as its constructor requires
 * an internal api instance.
 *
 * This is a function class so instances of `Types` are functions and can
 * be invoked directly, besides accessing its members. Its default function
 * action is equivalent to {@link Types#get get} or {@link Types#all all} if
 * no id is provided.
 */


var Types = function (_CallableInstance4) {
  (0, _inherits3.default)(Types, _CallableInstance4);

  /**
   * Create a new Types instance using the given `agent`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @constructor
   */
  function Types(agent) {
    (0, _classCallCheck3.default)(this, Types);

    var _this4 = (0, _possibleConstructorReturn3.default)(this, (Types.__proto__ || (0, _getPrototypeOf2.default)(Types)).call(this, function (id) {
      return id ? _this4.get(id) : _this4.all();
    }));

    _this4._agent = agent;
    _this4._all = new PageHandler(function (page) {
      return _this4.all(page);
    });

    _this4._search = null;
    _this4._cats = null;
    _this4._groups = null;
    _this4._mktGroups = null;
    return _this4;
  }

  /**
   * A Categories instance configured with the same agent.
   *
   * @type {Categories}
   */


  (0, _createClass3.default)(Types, [{
    key: 'get',


    /**
     * Create a new Type end point targeting the particular type by `id`.
     *
     * @param id {Number} The type id
     * @returns {Type}
     */
    value: function get(id) {
      return new Type(this._agent, id);
    }

    /**
     * @esi_route get_markets_prices
     * @esi_example esi.types.prices()
     *
     * @return {Promise.<Array.<Object>>}
     */

  }, {
    key: 'prices',
    value: function prices() {
      return this._agent.noAuth.get('/v1/markets/prices/');
    }

    /**
     * @esi_route get_universe_types
     * @esi_example esi.types()
     *
     * @param page {Number} If 0, then all pages are returned, concatenated as a
     *     single array.
     * @return {Promise.<Array.<Number>>}
     */

  }, {
    key: 'all',
    value: function all() {
      var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (page == 0) {
        return this._all.getAll();
      } else {
        return this._agent.noAuth.get('/v1/universe/types/', { query: { 'page': page } });
      }
    }

    /**
     * @esi_route post_universe_names
     *
     * Results will only includes matches with the type category.
     * If `ids` is longer than the reported maximum length for ESI, the array
     * will be split into smaller chunks and multiple requests will be made and
     * then concatenated back together.
     *
     * @esi_returns {!category}
     * @esi_example esi.types.names() category=[inventory_type]
     *
     * @param {Array.<Number>} ids If no ids are provided, then all names are
     *     returned
     * @return {Promise.<Array.<Object>>}
     */

  }, {
    key: 'names',
    value: function names() {
      var _this5 = this;

      var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      if (!ids || ids.length == 0) {
        return this.all().then(function (allIds) {
          return _this5.names(allIds);
        });
      } else {
        return _names(this._agent, 'inventory_type', ids);
      }
    }
  }, {
    key: 'categories',
    get: function get() {
      if (!this._cats) {
        this._cats = new Categories(this._agent);
      }
      return this._cats;
    }

    /**
     * A Groups instance configured with the same agent.
     *
     * @type {Groups}
     */

  }, {
    key: 'groups',
    get: function get() {
      if (!this._groups) {
        this._groups = new Groups(this._agent);
      }
      return this._groups;
    }

    /**
     * A MarketGroups instance configured with the same agent.
     *
     * @type {MarketGroups}
     */

  }, {
    key: 'marketGroups',
    get: function get() {
      if (!this._mktGroups) {
        this._mktGroups = new MarketGroups(this._agent);
      }
      return this._mktGroups;
    }

    /**
     * A Search module instance configured to search over the `'inventorytype'`
     * type.
     *
     * @esi_example esi.types.search('text') category=[inventorytype] get_search
     *
     * @type {Search}
     */

  }, {
    key: 'search',
    get: function get() {
      if (!this._search) {
        this._search = new Search(this._agent, ['inventorytype']);
      }
      return this._search;
    }
  }]);
  return Types;
}(CallableInstance);

module.exports = Types;