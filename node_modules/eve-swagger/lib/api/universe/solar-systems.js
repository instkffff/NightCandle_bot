'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CallableInstance = require('../../internal/callable-instance');
var Search = require('../search');

var _names = require('../../internal/names');

/**
 * An api adapter for dealing with a single solar system, currently only
 * supporting fetching simple information and calculating routes between
 * systems.
 */

var SolarSystem = function () {
  /**
   * Create a new SolarSystem for the given `agent` provider and specific
   * `solarSystemId`.
   *
   * @param agent {ESIAgent} The agent used to generate web requests
   * @param solarSystemId {Number} The system id that is used for all requests
   * @constructor
   */
  function SolarSystem(agent, solarSystemId) {
    (0, _classCallCheck3.default)(this, SolarSystem);

    this._agent = agent;
    this._id = solarSystemId;
  }

  /**
   * @esi_route get_universe_systems_system_id
   * @esi_example esi.solarSystems(1).info()
   *
   * @return {Promise.<Object>}
   */


  (0, _createClass3.default)(SolarSystem, [{
    key: 'info',
    value: function info() {
      return this._agent.noAuth.get('/v2/universe/systems/{system_id}/', { path: { 'system_id': this._id } });
    }
  }, {
    key: '_getRoute',
    value: function _getRoute(type, to, avoid, connections) {
      // Build up single level connections array
      var flatConnections = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)(connections), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var c = _step.value;

          flatConnections.push(c[0] + '|' + c[1]);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return this._agent.noAuth.get('/v1/route/{origin}/{destination}/', {
        path: {
          'origin': this._id,
          'destination': to
        },
        query: {
          'flag': type,
          'avoid': avoid,
          'connections': flatConnections
        }
      });
    }

    /**
     * @esi_route get_route_origin_destination
     * @esi_param destination - to
     * @esi_param flag - "shortest"
     *
     * @esi_example esi.solarSystems(1).shortestRoute(2, {...})
     *
     * @param to {Number}
     * @param avoid {Array.<Number>} Defaults to `[]`
     * @param connections {Array.<Array.<Number>>} Defaults to `[]`
     * @returns {Promise.<Array.<Number>>}
     */

  }, {
    key: 'shortestRoute',
    value: function shortestRoute(to) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref$avoid = _ref.avoid,
          avoid = _ref$avoid === undefined ? [] : _ref$avoid,
          _ref$connections = _ref.connections,
          connections = _ref$connections === undefined ? [] : _ref$connections;

      return this._getRoute('shortest', to, avoid, connections);
    }

    /**
     * @esi_route get_route_origin_destination
     * @esi_param destination - to
     * @esi_param flag - "secure"
     *
     * @esi_example esi.solarSystems(1).secureRoute(2, {...})
     *
     * @param to {Number}
     * @param avoid {Array.<Number>} Defaults to `[]`
     * @param connections {Array.<Array.<Number>>} Defaults to `[]`
     * @returns {Promise.<Array.<Number>>}
     */

  }, {
    key: 'secureRoute',
    value: function secureRoute(to) {
      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref2$avoid = _ref2.avoid,
          avoid = _ref2$avoid === undefined ? [] : _ref2$avoid,
          _ref2$connections = _ref2.connections,
          connections = _ref2$connections === undefined ? [] : _ref2$connections;

      return this._getRoute('secure', to, avoid, connections);
    }

    /**
     * @esi_route get_route_origin_destination
     * @esi_param destination - to
     * @esi_param flag - "insecure"
     *
     * @esi_example esi.solarSystems(1).insecureRoute(2, {...})
     *
     * @param to {Number}
     * @param avoid {Array.<Number>} Defaults to `[]`
     * @param connections {Array.<Array.<Number>>} Defaults to `[]`
     * @returns {Promise.<Array.<Number>>}
     */

  }, {
    key: 'insecureRoute',
    value: function insecureRoute(to) {
      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref3$avoid = _ref3.avoid,
          avoid = _ref3$avoid === undefined ? [] : _ref3$avoid,
          _ref3$connections = _ref3.connections,
          connections = _ref3$connections === undefined ? [] : _ref3$connections;

      return this._getRoute('insecure', to, avoid, connections);
    }
  }]);
  return SolarSystem;
}();

/**
 * An api adapter that provides functions for accessing solar system information
 * via the [universe](https://esi.tech.ccp.is/latest/#/Universe) and
 * [search](https://esi.tech.ccp.is/latest/#/Search) ESI end points. You should
 * not usually instantiate this directly as its constructor requires an internal
 * api instance.
 *
 * This is a function class so instances of `SolarSystems` are functions and can
 * be invoked directly, besides accessing its members. Its default function
 * action is equivalent to {@link SolarSystems#get get} or {@link
    * SolarSystems#all all} if no id is provided.
 */


var SolarSystems = function (_CallableInstance) {
  (0, _inherits3.default)(SolarSystems, _CallableInstance);

  /**
   * Create a new SolarSystems instance using the given `api`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @constructor
   */
  function SolarSystems(agent) {
    (0, _classCallCheck3.default)(this, SolarSystems);

    var _this = (0, _possibleConstructorReturn3.default)(this, (SolarSystems.__proto__ || (0, _getPrototypeOf2.default)(SolarSystems)).call(this, function (id) {
      return id ? _this.get(id) : _this.all();
    }));

    _this._agent = agent;

    _this._search = null;
    return _this;
  }

  /**
   * A Search module instance configured to search over the `'solarsystem'`
   * type.
   *
   * @esi_example esi.solarSystems.search('text') category=[solarsystem] get_search
   *
   * @type {Search}
   */


  (0, _createClass3.default)(SolarSystems, [{
    key: 'get',


    /**
     * Create a new SolarSystem end point targeting the particular system by `id`.
     *
     * @param id {Number} The solar system id
     * @returns {SolarSystem}
     */
    value: function get(id) {
      return new SolarSystem(this._agent, id);
    }

    /**
     * @esi_route get_universe_systems
     * @esi_example esi.solarSystems()
     *
     * @returns {Promise.<Array.<Number>>}
     */

  }, {
    key: 'all',
    value: function all() {
      return this._agent.noAuth.get('/v1/universe/systems/');
    }

    /**
     * @esi_route get_universe_system_jumps
     * @esi_example esi.solarSystems.jumpStats()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'jumpStats',
    value: function jumpStats() {
      return this._agent.noAuth.get('/v1/universe/system_jumps/');
    }

    /**
     * @esi_route get_universe_system_kills
     * @esi_example esi.solarSystems.killStats()
     *
     * @returns {Promise.<Array.<Object>>}
     */

  }, {
    key: 'killStats',
    value: function killStats() {
      return this._agent.noAuth.get('/v1/universe/system_kills/');
    }

    /**
     * @esi_route post_universe_names
     *
     * Results will only include matches with the solar system category.
     * If `ids` is longer than the reported maximum length for ESI, the array
     * will be split into smaller chunks and multiple requests will be made and
     * then concatenated back together.
     *
     * @esi_returns {!category}
     * @esi_example esi.solarSystems.names() category=[solar_system]
     *
     * @param {Array.<Number>} ids If no ids are provided, then all names are
     *     returned.
     * @return {Promise.<Array.<Object>>}
     */

  }, {
    key: 'names',
    value: function names() {
      var _this2 = this;

      var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      if (!ids || ids.length == 0) {
        return this.all().then(function (allIds) {
          return _this2.names(allIds);
        });
      } else {
        return _names(this._agent, 'solar_system', ids);
      }
    }
  }, {
    key: 'search',
    get: function get() {
      if (!this._search) {
        this._search = new Search(this._agent, ['solarsystem']);
      }
      return this._search;
    }
  }]);
  return SolarSystems;
}(CallableInstance);

module.exports = SolarSystems;