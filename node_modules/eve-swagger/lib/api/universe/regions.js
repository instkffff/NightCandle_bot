'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CallableInstance = require('../../internal/callable-instance');

var _require = require('../../internal/page-handler'),
    _require2 = (0, _slicedToArray3.default)(_require, 1),
    PageHandler = _require2[0];

var Search = require('../search');

var _names = require('../../internal/names');

/**
 * An api adapter that provides functions for accessing various details for a
 * region specified by id, via functions in the
 * [market](https://esi.tech.ccp.is/latest/#/Market) ESI endpoints. You should
 * not usually instantiate this directly as its constructor requires an internal
 * api instance.
 */

var Region = function () {
  /**
   * Create a new Region for the given `agent` provider and specific
   * `regionId`.
   *
   * @param agent {ESIAgent} The agent used to generate web requests
   * @param regionId {Number} The region id that is used for all requests
   * @constructor
   */
  function Region(agent, regionId) {
    var _this = this;

    (0, _classCallCheck3.default)(this, Region);

    this._agent = agent;
    this._id = regionId;
    this._all = new PageHandler(function (page) {
      return _this.orders(page);
    });
  }

  /**
   * @esi_route get_universe_regions_region_id
   * @esi_example esi.regions(1).info()
   *
   * @returns {Promise.<Object>}
   */


  (0, _createClass3.default)(Region, [{
    key: 'info',
    value: function info() {
      return this._agent.noAuth.get('/v1/universe/regions/{region_id}/', { path: { 'region_id': this._id } });
    }

    /**
     * @esi_route get_markets_region_id_history
     * @esi_example esi.regions(1).history();
     *
     * @param {Number} typeId
     * @return {Promise.<Array.<Object>>}
     */

  }, {
    key: 'history',
    value: function history(typeId) {
      return this._agent.noAuth.get('/v1/markets/{region_id}/history/', {
        path: { 'region_id': this._id },
        query: { 'type_id': typeId }
      });
    }

    /**
     * @esi_route get_markets_region_id_orders
     * @esi_param order_type - "all"
     * @esi_param !type_id
     * @esi_example esi.regions(1).orders() orders=all
     *
     * @param {Number} page
     * @return {Promise.<Array.<Object>>}
     */

  }, {
    key: 'orders',
    value: function orders() {
      var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      if (page == 0) {
        return this._all.getAll();
      } else {
        return this._agent.noAuth.get('/v1/markets/{region_id}/orders/', {
          path: { 'region_id': this._id },
          query: {
            'type_id': null,
            'page': page,
            'order_type': 'all'
          }
        });
      }
    }

    /**
     * @esi_route get_markets_region_id_orders
     * @esi_param order_type - "buy"
     * @esi_param !page
     * @esi_example esi.regions(1).buyOrdersFor(2) orders=buy&typeId
     *
     * @param {Number} typeId
     * @return {Promise.<Array.<Object>>}
     */

  }, {
    key: 'buyOrdersFor',
    value: function buyOrdersFor(typeId) {
      return this._agent.noAuth.get('/v1/markets/{region_id}/orders/', {
        path: { 'region_id': this._id },
        query: {
          'type_id': typeId,
          'page': null,
          'order_type': 'buy'
        }
      });
    }

    /**
     * @esi_route get_markets_region_id_orders
     * @esi_param order_type - "sell"
     * @esi_param !page
     * @esi_example esi.regions(1).sellOrdersFor(2) orders=sell&typeId
     *
     * @param {Number} typeId
     * @return {Promise.<Array.<Object>>}
     */

  }, {
    key: 'sellOrdersFor',
    value: function sellOrdersFor(typeId) {
      return this._agent.noAuth.get('/v1/markets/{region_id}/orders/', {
        path: { 'region_id': this._id },
        query: {
          'type_id': typeId,
          'page': null,
          'order_type': 'sell'
        }
      });
    }

    /**
     * @esi_route get_markets_region_id_orders
     * @esi_param order_type - "all"
     * @esi_param !page
     * @esi_example esi.regions(1).ordersFor(2) orders=all&typeId
     *
     * @param {Number} typeId
     * @return {Promise.<Array.<Object>>}
     */

  }, {
    key: 'ordersFor',
    value: function ordersFor(typeId) {
      return this._agent.noAuth.get('/v1/markets/{region_id}/orders/', {
        path: { 'region_id': this._id },
        query: {
          'type_id': typeId,
          'page': null,
          'order_type': 'all'
        }
      });
    }
  }]);
  return Region;
}();

/**
 * An api adapter over the end points handling regions via functions in the
 * [universe](https://esi.tech.ccp.is/latest/#/Universe) and
 * [search](https://esi.tech.ccp.is/latest/#/Search) ESI endpoints. You should
 * not usually instantiate this directly as its constructor requires an internal
 * api instance.
 *
 * This is a function class so instances of `Regions` are functions and can be
 * invoked directly, besides accessing its members. Its default function action
 * is equivalent to {@link Regions#get get} or to {@link Regions#all all} if no
 * id is provided.
 */


var Regions = function (_CallableInstance) {
  (0, _inherits3.default)(Regions, _CallableInstance);

  /**
   * Create a new Regions function using the given `agent`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @constructor
   */
  function Regions(agent) {
    (0, _classCallCheck3.default)(this, Regions);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (Regions.__proto__ || (0, _getPrototypeOf2.default)(Regions)).call(this, function (id) {
      return id ? _this2.get(id) : _this2.all();
    }));

    _this2._agent = agent;

    _this2._search = null;
    return _this2;
  }

  /**
   * A Search module instance configured to search over the `'region'` type.
   *
   * @esi_example esi.regions.search('text') category=[region] get_search
   *
   * @type {Search}
   */


  (0, _createClass3.default)(Regions, [{
    key: 'get',


    /**
     * Create a new Region end point targeting the particular region by `id`.
     *
     * @param id {Number} The region id
     * @returns {Region}
     */
    value: function get(id) {
      return new Region(this._agent, id);
    }

    /**
     * @esi_route get_universe_regions
     * @esi_example esi.regions()
     *
     * @returns {Promise.<Array.<Number>>}
     */

  }, {
    key: 'all',
    value: function all() {
      return this._agent.noAuth.get('/v1/universe/regions/');
    }

    /**
     * @esi_route post_universe_names
     *
     * Results will only include matches with the region category.
     * If `ids` is longer than the reported maximum length for ESI, the array
     * will be split into smaller chunks and multiple requests will be made and
     * then concatenated back together.
     *
     * @esi_returns {!category}
     * @esi_example esi.regions.names() category=[region]
     *
     * @param {Array.<Number>} ids If no ids are provided, then all names are
     *     returned.
     * @return {Promise.<Array.<Object>>}
     */

  }, {
    key: 'names',
    value: function names() {
      var _this3 = this;

      var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      if (!ids || ids.length == 0) {
        return this.all().then(function (allIds) {
          return _this3.names(allIds);
        });
      } else {
        return _names(this._agent, 'region', ids);
      }
    }
  }, {
    key: 'search',
    get: function get() {
      if (!this._search) {
        this._search = new Search(this._agent, ['region']);
      }
      return this._search;
    }
  }]);
  return Regions;
}(CallableInstance);

module.exports = Regions;