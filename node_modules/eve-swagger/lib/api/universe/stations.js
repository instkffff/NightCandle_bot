'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CallableInstance = require('../../internal/callable-instance');
var Search = require('../search');

var _names = require('../../internal/names');

/**
 * An api adapter for dealing with a single station, currently only supporting
 * fetching simple information.
 */

var Station = function () {
  /**
   * Create a new Station for the given `api` provider and specific
   * `stationId`.
   *
   * @param agent {ESIAgent} The agent used to generate web requests
   * @param stationId {Number} The station id that is used for all requests
   * @constructor
   */
  function Station(agent, stationId) {
    (0, _classCallCheck3.default)(this, Station);

    this._agent = agent;
    this._id = stationId;
  }

  /**
   * @esi_route get_universe_stations_station_id
   * @esi_example esi.stations(1).info()
   *
   * @return {Promise.<Object>}
   */


  (0, _createClass3.default)(Station, [{
    key: 'info',
    value: function info() {
      return this._agent.noAuth.get('/v2/universe/stations/{station_id}/', { path: { 'station_id': this._id } });
    }
  }]);
  return Station;
}();

/**
 * An api adapter that provides functions for accessing station information via
 * the [universe](https://esi.tech.ccp.is/latest/#/Universe) and
 * [search](https://esi.tech.ccp.is/latest/#/Search) ESI end points. You should
 * not usually instantiate this directly as its constructor requires an internal
 * api instance.
 *
 * This is a function class so instances of `Stations` are functions and can be
 * invoked directly, besides accessing its members. Its default function action
 * is equivalent to {@link Stations#get get}.
 */


var Stations = function (_CallableInstance) {
  (0, _inherits3.default)(Stations, _CallableInstance);

  /**
   * Create a new Stations instance using the given `agent`.
   *
   * @param agent {ESIAgent} The ESI Agent
   * @constructor
   */
  function Stations(agent) {
    (0, _classCallCheck3.default)(this, Stations);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Stations.__proto__ || (0, _getPrototypeOf2.default)(Stations)).call(this, function (id) {
      return _this.get(id);
    }));

    _this._agent = agent;

    _this._search = null;
    return _this;
  }

  /**
   * A Search module instance configured to search over the `'station'`
   * type.
   *
   * @esi_example esi.stations.search('text') category=[station] get_search
   *
   * @type {Search}
   */


  (0, _createClass3.default)(Stations, [{
    key: 'get',


    /**
     * Create a new Station end point targeting the particular system by `id`.
     *
     * @param id {Number} The station id
     * @returns {Station}
     */
    value: function get(id) {
      return new Station(this._agent, id);
    }

    /**
     * @esi_route post_universe_names
     *
     * Results will only include matches with the station category.
     * If `ids` is longer than the reported maximum length for ESI, the array
     * will be split into smaller chunks and multiple requests will be made and
     * then concatenated back together.
     *
     * @esi_returns {!category}
     * @esi_example esi.stations.names(ids) category=[station]
     *
     * @param {Array.<Number>} ids
     * @return {Promise.<Array.<Object>>}
     */

  }, {
    key: 'names',
    value: function names(ids) {
      return _names(this._agent, 'station', ids);
    }
  }, {
    key: 'search',
    get: function get() {
      if (!this._search) {
        this._search = new Search(this._agent, ['station']);
      }
      return this._search;
    }
  }]);
  return Stations;
}(CallableInstance);

module.exports = Stations;