'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Search = require('../search');

var CallableInstance = require('../../internal/callable-instance');

/**
 * An api adapter that provides functions for accessing various details for a
 * moon specified by id, via functions in the
 * [universe](https://esi.tech.ccp.is/latest/#/Universe) ESI endpoints. You
 * should not usually instantiate this directly as its constructor requires an
 * internal api instance.
 */

var Moon = function () {
  /**
   * Create a new Moon for the given `agent` provider and specific
   * `moonId`.
   *
   * @param agent {ESIAgent} The ESI agent used to generate web requests
   * @param moonId {Number} The moon id that is used for all
   *     requests
   * @constructor
   */
  function Moon(agent, moonId) {
    (0, _classCallCheck3.default)(this, Moon);

    this._agent = agent;
    this._id = moonId;
  }

  /**
   * @esi_route get_universe_moons_moon_id
   * @esi_example esi.moons(1).info()
   *
   * @returns {Promise.<Object>}
   */


  (0, _createClass3.default)(Moon, [{
    key: 'info',
    value: function info() {
      return this._agent.noAuth.get('/v1/universe/moons/{moon_id}/', { path: { 'moon_id': this._id } });
    }
  }]);
  return Moon;
}();

/**
 * An api adapter that provides functions for accessing moon information via the
 * [universe](https://esi.tech.ccp.is/latest/#/Universe) ESI end points. You
 * should not usually instantiate this directly as its constructor requires an
 * internal api instance.
 *
 * This is a function class so instances of `Moons` are functions and
 * can be invoked directly, besides accessing its members. Its default function
 * action is equivalent to {@link Moons#get get}.
 */


var Moons = function (_CallableInstance) {
  (0, _inherits3.default)(Moons, _CallableInstance);

  /**
   * Create a new Moons instance using the given `agent`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @constructor
   */
  function Moons(agent) {
    (0, _classCallCheck3.default)(this, Moons);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Moons.__proto__ || (0, _getPrototypeOf2.default)(Moons)).call(this, function (id) {
      return _this.get(id);
    }));

    _this._agent = agent;
    return _this;
  }

  /**
   * Create a new Moon end point targeting the particular moon
   * by `id`.
   *
   * @param id {Number} The moon id
   * @returns {Moon}
   */


  (0, _createClass3.default)(Moons, [{
    key: 'get',
    value: function get(id) {
      return new Moon(this._agent, id);
    }
  }]);
  return Moons;
}(CallableInstance);

module.exports = Moons;