'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Search = require('../search');

var CallableInstance = require('../../internal/callable-instance');
var _names = require('../../internal/names');

/**
 * An api adapter that provides functions for accessing various details for a
 * constellation specified by id, via functions in the
 * [universe](https://esi.tech.ccp.is/latest/#/Universe) ESI endpoints. You
 * should not usually instantiate this directly as its constructor requires an
 * internal api instance.
 */

var Constellation = function () {
  /**
   * Create a new Constellation for the given `agent` provider and specific
   * `constellationId`.
   *
   * @param agent {ESIAgent} The agent used to generate web requests
   * @param constellationId {Number} The constellation id that is used for all
   *     requests
   * @constructor
   */
  function Constellation(agent, constellationId) {
    (0, _classCallCheck3.default)(this, Constellation);

    this._agent = agent;
    this._id = constellationId;
  }

  /**
   * @esi_route get_universe_constellations_constellation_id
   * @esi_example esi.constellations(1).info()
   *
   * @returns {Promise.<Object>}
   */


  (0, _createClass3.default)(Constellation, [{
    key: 'info',
    value: function info() {
      return this._agent.noAuth.get('/v1/universe/constellations/{constellation_id}/', { path: { 'constellation_id': this._id } });
    }
  }]);
  return Constellation;
}();

/**
 * An api adapter that provides functions for accessing constellation
 * information via the
 * [universe](https://esi.tech.ccp.is/latest/#/Universe) and
 * [search](https://esi.tech.ccp.is/latest/#/Search) ESI end points.
 * You should not usually instantiate this directly as its constructor requires
 * an internal api instance.
 *
 * This is a function class so instances of `Constellations` are functions and
 * can be invoked directly, besides accessing its members. Its default function
 * action is equivalent to {@link Constellations#get get} or {@link
    * Constellations#all all} if no id is provided.
 */


var Constellations = function (_CallableInstance) {
  (0, _inherits3.default)(Constellations, _CallableInstance);

  /**
   * Create a new Constellations instance using the given `agent`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @constructor
   */
  function Constellations(agent) {
    (0, _classCallCheck3.default)(this, Constellations);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Constellations.__proto__ || (0, _getPrototypeOf2.default)(Constellations)).call(this, function (id) {
      return id ? _this.get(id) : _this.all();
    }));

    _this._agent = agent;

    _this._search = null;
    return _this;
  }

  /**
   * A Search module instance configured to search over the `'constellation'`
   * type.
   *
   * @esi_example esi.constellations.search('text') category=[constellation] get_search
   *
   * @type {Search}
   */


  (0, _createClass3.default)(Constellations, [{
    key: 'get',


    /**
     * Create a new Constellation end point targeting the particular constellation
     * by `id`.
     *
     * @param id {Number} The constellation id
     * @returns {Constellation}
     */
    value: function get(id) {
      return new Constellation(this._agent, id);
    }

    /**
     * @esi_route get_universe_constellations
     * @esi_example esi.constellations()
     *
     * @return {Promise.<Array.<Number>>}
     */

  }, {
    key: 'all',
    value: function all() {
      return this._agent.noAuth.get('/v1/universe/constellations/');
    }

    /**
     * @esi_route post_universe_names
     *
     * The results will only include matches with the constellation category.
     * If `ids` is longer than the reported maximum length for ESI, the array
     * will be split into smaller chunks and multiple requests will be made and
     * then concatenated back together.
     *
     * @esi_returns {!category}
     * @esi_example esi.constellations.names() category=[constellation]
     *
     * @param {Array.<Number>} ids If no ids are provided, then all names are
     *     returned.
     * @return {Promise.<Array.<Object>>}
     */

  }, {
    key: 'names',
    value: function names() {
      var _this2 = this;

      var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      if (!ids || ids.length == 0) {
        return this.all().then(function (allIds) {
          return _this2.names(allIds);
        });
      } else {
        return _names(this._agent, 'constellation', ids);
      }
    }
  }, {
    key: 'search',
    get: function get() {
      if (!this._search) {
        this._search = new Search(this._agent, ['constellation']);
      }
      return this._search;
    }
  }]);
  return Constellations;
}(CallableInstance);

module.exports = Constellations;