'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CallableInstance = require('../../internal/callable-instance');

/**
 * An api adapter that provides functions for accessing a opportunity group,
 * specified by id via functions in the
 * [opportunities](https://esi.tech.ccp.is/latest/#/Opportunities) ESI
 * endpoints.
 *
 * You should not usually instantiate this directly as its constructor requires
 * an internal api instance.
 */

var OpportunityGroup = function () {
  /**
   * Create a new OpportunityGroup identified as `groupId`.
   *
   * @param agent {ESIAgent} The ESI agent used to make web requests
   * @param groupId {Number} The group id used in all requests
   * @constructor
   */
  function OpportunityGroup(agent, groupId) {
    (0, _classCallCheck3.default)(this, OpportunityGroup);

    this._agent = agent;
    this._id = groupId;
  }

  /**
   * @esi_route get_opportunities_groups_group_id
   * @esi_example esi.opportunities.groups(1).info()
   *
   * @returns {Promise.<Object>}
   */


  (0, _createClass3.default)(OpportunityGroup, [{
    key: 'info',
    value: function info() {
      return this._agent.noAuth.get('/v1/opportunities/groups/{group_id}/', { path: { 'group_id': this._id } });
    }
  }]);
  return OpportunityGroup;
}();

/**
 * An api adapter over the end points handling multiple opportunity groups via
 * functions in the
 * [opportunities](https://esi.tech.ccp.is/latest/#/Opportunities) ESI
 * endpoints. You should not usually instantiate this directly as its
 * constructor requires an internal api instance.
 *
 * This is a function class so instances of `OpportunityGroups` are functions
 * and can be invoked directly, besides accessing its members. Its default
 * function action is equivalent to {@link OpportunityGroups#get get} or {@link
 * OpportunityGroups#all all} depending on if an id is provided.
 */


var OpportunityGroups = function (_CallableInstance) {
  (0, _inherits3.default)(OpportunityGroups, _CallableInstance);

  /**
   * Create a new Alliances function using the given `agent`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @constructor
   */
  function OpportunityGroups(agent) {
    (0, _classCallCheck3.default)(this, OpportunityGroups);

    var _this = (0, _possibleConstructorReturn3.default)(this, (OpportunityGroups.__proto__ || (0, _getPrototypeOf2.default)(OpportunityGroups)).call(this, function (id) {
      return id ? _this.get(id) : _this.all();
    }));

    _this._agent = agent;
    return _this;
  }

  /**
   * Create a new OpportunityGroup end point targeting the particular attribute
   * by `id`.
   *
   * @param id {Number} The group id
   * @returns {OpportunityGroup}
   */


  (0, _createClass3.default)(OpportunityGroups, [{
    key: 'get',
    value: function get(id) {
      return new OpportunityGroup(this._agent, id);
    }

    /**
     * @esi_route get_opportunities_groups
     * @esi_example esi.opportunities.groups()
     *
     * @returns {Promise.<Array.<Number>>}
     */

  }, {
    key: 'all',
    value: function all() {
      return this._agent.noAuth.get('/v1/opportunities/groups/');
    }
  }]);
  return OpportunityGroups;
}(CallableInstance);

/**
 * An api adapter that provides functions for accessing a particular opportunity
 * task, specified by id via functions in the
 * [opportunity](https://esi.tech.ccp.is/latest/#/Opportunities) ESI endpoints.
 *
 * You should not usually instantiate this directly as its constructor requires
 * an internal api instance.
 */


var OpportunityTask = function () {
  /**
   * Create a new OpportunityTask identified as `taskId`.
   *
   * @param agent {ESIAgent} The ESI agent used to make web requests
   * @param taskId {Number} The task id used in all requests
   * @constructor
   */
  function OpportunityTask(agent, taskId) {
    (0, _classCallCheck3.default)(this, OpportunityTask);

    this._agent = agent;
    this._id = taskId;
  }

  /**
   * @esi_route get_opportunities_tasks_task_id
   * @esi_example esi.opportunities.tasks(1).info()
   *
   * @returns {Promise.<Object>}
   */


  (0, _createClass3.default)(OpportunityTask, [{
    key: 'info',
    value: function info() {
      return this._agent.noAuth.get('/v1/opportunities/tasks/{task_id}/', { path: { 'task_id': this._id } });
    }
  }]);
  return OpportunityTask;
}();

/**
 * An api adapter over the end points handling multiple opportunity tasks via
 * functions in the [opportunities](https://esi.tech.ccp.is/latest/#/Opportunities)
 * ESI endpoints. You should not usually instantiate this directly as its
 * constructor requires an internal api instance.
 *
 * This is a function class so instances of `OpportunityTasks` are functions and can
 * be invoked directly, besides accessing its members. Its default function
 * action is equivalent to {@link OpportunityTasks#get get} or {@link OpportunityTasks#all
 * all} depending on if an id is provided.
 */


var OpportunityTasks = function (_CallableInstance2) {
  (0, _inherits3.default)(OpportunityTasks, _CallableInstance2);

  /**
   * Create a new OpportunityTasks function using the given `agent`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @constructor
   */
  function OpportunityTasks(agent) {
    (0, _classCallCheck3.default)(this, OpportunityTasks);

    var _this2 = (0, _possibleConstructorReturn3.default)(this, (OpportunityTasks.__proto__ || (0, _getPrototypeOf2.default)(OpportunityTasks)).call(this, function (id) {
      return id ? _this2.get(id) : _this2.all();
    }));

    _this2._agent = agent;
    return _this2;
  }

  /**
   * Create a new OpportunityTask end point targeting the particular effect by `id`.
   *
   * @param id {Number} The effect id
   * @returns {OpportunityTask}
   */


  (0, _createClass3.default)(OpportunityTasks, [{
    key: 'get',
    value: function get(id) {
      return new OpportunityTask(this._agent, id);
    }

    /**
     * @esi_route get_opportunities_tasks
     * @esi_example esi.opportunities.tasks()
     *
     * @returns {Promise.<Array.<Number>>}
     */

  }, {
    key: 'all',
    value: function all() {
      return this._agent.noAuth.get('/v1/opportunities/tasks/');
    }
  }]);
  return OpportunityTasks;
}(CallableInstance);

/**
 * An api adapter over the end points handling opportunities information via
 * functions in the
 * [opportunities](https://esi.tech.ccp.is/latest/#/Opportunities) ESI
 * endpoints. You should not usually instantiate this directly as its
 * constructor requires an internal api instance.
 */


var Opportunities = function () {
  /**
   * Create a new Opportunities end point using the given `agent`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @constructor
   */
  function Opportunities(agent) {
    (0, _classCallCheck3.default)(this, Opportunities);

    this._agent = agent;
    this._groups = null;
    this._tasks = null;
  }

  /**
   * An instance of OpportunityGroups for all opportunity groups in Eve.
   *
   * @type {OpportunityGroups}
   */


  (0, _createClass3.default)(Opportunities, [{
    key: 'groups',
    get: function get() {
      if (!this._groups) {
        this._groups = new OpportunityGroups(this._agent);
      }
      return this._groups;
    }

    /**
     * An instance of OpportunityTasks for all opportunity tasks in Eve.
     *
     * @type {OpportunityTasks}
     */

  }, {
    key: 'tasks',
    get: function get() {
      if (!this._tasks) {
        this._tasks = new OpportunityTasks(this._agent);
      }
      return this._tasks;
    }
  }]);
  return Opportunities;
}();

module.exports = Opportunities;