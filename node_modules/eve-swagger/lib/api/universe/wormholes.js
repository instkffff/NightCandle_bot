'use strict';

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Search = require('../search');

/**
 * An api adapter that provides functions for accessing wormhole information
 * via the
 * [universe](https://esi.tech.ccp.is/latest/#/Universe) and
 * [search](https://esi.tech.ccp.is/latest/#/Search) ESI end points.
 * You should not usually instantiate this directly as its constructor requires
 * an internal api instance.
 */

var Wormholes = function () {
  /**
   * Create a new Wormholes instance using the given `agent`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @constructor
   */
  function Wormholes(agent) {
    (0, _classCallCheck3.default)(this, Wormholes);

    this._agent = agent;

    this._search = null;
  }

  /**
   * A Search module instance configured to search over the `'wormhole'`  type.
   *
   * @esi_example esi.wormholes.search('text') category=[wormhole] get_search
   *
   * @type {Search}
   */


  (0, _createClass3.default)(Wormholes, [{
    key: 'search',
    get: function get() {
      if (!this._search) {
        this._search = new Search(this._agent, ['wormhole']);
      }
      return this._search;
    }
  }]);
  return Wormholes;
}();

module.exports = Wormholes;