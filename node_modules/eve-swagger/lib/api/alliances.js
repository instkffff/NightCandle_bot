'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CallableInstance = require('../internal/callable-instance');
var Search = require('./search');

var _names = require('../internal/names');

/**
 * An api adapter that provides functions for accessing various details for an
 * alliance specified by id, via functions in the
 * [alliance](https://esi.tech.ccp.is/latest/#/Alliance) ESI endpoints. You
 * should not usually instantiate this directly as its constructor requires an
 * internal api instance.
 */

var Alliance = function () {
  /**
   * Create a new Alliance for the given `agent` provider and specific
   * `allianceId`.
   *
   * @param agent {ESIAgent} The agent used to generate web requests
   * @param allianceId {Number} The alliance id that is used for all requests
   * @constructor
   */
  function Alliance(agent, allianceId) {
    (0, _classCallCheck3.default)(this, Alliance);

    this._agent = agent;
    this._id = allianceId;
  }

  /**
   * @esi_route get_alliances_alliance_id
   * @esi_example esi.alliances(1).info()
   *
   * @return {Promise.<Object>}
   */


  (0, _createClass3.default)(Alliance, [{
    key: 'info',
    value: function info() {
      return this._agent.noAuth.get('/v2/alliances/{alliance_id}/', { path: { 'alliance_id': this._id } });
    }

    /**
     * @esi_route get_alliances_alliance_id_corporations
     * @esi_example esi.alliances(1).corporations()
     *
     * @return {Promise.<Array.<Number>>}
     */

  }, {
    key: 'corporations',
    value: function corporations() {
      return this._agent.noAuth.get('/v1/alliances/{alliance_id}/corporations/', { path: { 'alliance_id': this._id } });
    }

    /**
     * @esi_route get_alliances_alliance_id_icons
     * @esi_example esi.alliances(1).icon()
     *
     * @return {Promise.<Object>}
     */

  }, {
    key: 'icon',
    value: function icon() {
      return this._agent.noAuth.get('/v1/alliances/{alliance_id}/icons/', { path: { 'alliance_id': this._id } });
    }
  }]);
  return Alliance;
}();

/**
 * An api adapter over the end points handling multiple alliances via functions
 * in the [alliance](https://esi.tech.ccp.is/latest/#/Alliance) ESI endpoints.
 * You should not usually instantiate this directly as its constructor requires
 * an internal api instance.
 *
 * This is a function class so instances of `Alliances` are functions and can be
 * invoked directly, besides accessing its members. Its default function action
 * is equivalent to {@link Alliances#get get} or {@link Alliances#all all} if
 * no id is provided.
 */


var Alliances = function (_CallableInstance) {
  (0, _inherits3.default)(Alliances, _CallableInstance);

  /**
   * Create a new Alliances function using the given `agent`.
   *
   * @param agent {ESIAgent} The ESI agent
   * @constructor
   */
  function Alliances(agent) {
    (0, _classCallCheck3.default)(this, Alliances);

    var _this = (0, _possibleConstructorReturn3.default)(this, (Alliances.__proto__ || (0, _getPrototypeOf2.default)(Alliances)).call(this, function (id) {
      return id ? _this.get(id) : _this.all();
    }));

    _this._agent = agent;

    _this._search = null;
    return _this;
  }

  /**
   * A Search module instance configured to search over the `'alliance'`
   * type.
   *
   * @esi_example esi.alliances.search('text') category=[alliance] get_search
   *
   * @type {Search}
   */


  (0, _createClass3.default)(Alliances, [{
    key: 'get',


    /**
     * Create a new Alliance end point targeting the particular alliance by `id`.
     *
     * @param id {Number} The alliance id
     * @returns {Alliance}
     */
    value: function get(id) {
      return new Alliance(this._agent, id);
    }

    /**
     * @esi_route get_alliances
     * @esi_example esi.alliances()
     *
     * @return {Promise.<Array.<Number>>}
     */

  }, {
    key: 'all',
    value: function all() {
      return this._agent.noAuth.get('/v1/alliances/');
    }

    /**
     * @esi_route get_alliances_names
     * @esi_param alliance_ids - ids
     * @esi_returns {alliance_id: id, alliance_name: name}
     * @esi_example esi.alliance.names(ids)
     *
     * @param {Array.<Number>} ids If not provided then the names of all
     *     alliances will be returned.
     * @return {Promise.<Array.<Object>>}
     */

  }, {
    key: 'names',
    value: function names() {
      var _this2 = this;

      var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      if (!ids || ids.length == 0) {
        return this.all().then(function (allIds) {
          return _this2.names(allIds);
        });
      } else {
        if (ids.length > 20) {
          // Use universe/names end point since the /alliances one breaks if
          // the URL gets too long.
          return _names(this._agent, 'alliance', ids);
        } else {
          // Use alliance/names end point
          return this._agent.noAuth.get('/v1/alliances/names/', { query: { 'alliance_ids': ids } }).then(function (result) {
            // Rename alliance_id and alliance_name
            return result.map(function (r) {
              return {
                id: r.alliance_id,
                name: r.alliance_name
              };
            });
          });
        }
      }
    }
  }, {
    key: 'search',
    get: function get() {
      if (!this._search) {
        this._search = new Search(this._agent, ['alliance']);
      }
      return this._search;
    }
  }]);
  return Alliances;
}(CallableInstance);

module.exports = Alliances;