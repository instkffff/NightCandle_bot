'use strict';

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ESIAgent = require('./internal/esi-agent');
var CallableInstance = require('./internal/callable-instance');
var _names = require('./internal/names');

var Characters = require('./api/character/characters');

var Agents = require('./api/universe/agents');
var Bloodlines = require('./api/universe/bloodlines');
var Constellations = require('./api/universe/constellations');
var Dogma = require('./api/universe/dogma');
var Factions = require('./api/universe/factions');
var Freeports = require('./api/universe/freeports');
var Graphics = require('./api/universe/graphics');
var Industry = require('./api/universe/industry');
var Insurance = require('./api/universe/insurance');
var Moons = require('./api/universe/moons');
var Opportunities = require('./api/universe/opportunities');
var Planets = require('./api/universe/planets');
var PlanetaryInteraction = require('./api/universe/planetary-interaction');
var Races = require('./api/universe/races');
var Regions = require('./api/universe/regions');
var SolarSystems = require('./api/universe/solar-systems');
var Stargates = require('./api/universe/stargates');
var Stations = require('./api/universe/stations');
var Types = require('./api/universe/types');
var Wormholes = require('./api/universe/wormholes');

var Alliances = require('./api/alliances');
var Corporations = require('./api/corporations');
var Incursions = require('./api/incursions');
var Killmail = require('./api/killmail');
var Search = require('./api/search');
var Sovereignty = require('./api/sovereignty');
var Wars = require('./api/wars');

/**
 * API creates a shared, internal ESIAgent and then lazily instantiates all
 * specific modules as needed. The API instance is also a function that can
 * be invoked to create a new API instance with a different configuration.
 *
 * @see https://esi.tech.ccp.is/latest
 */

var API = function (_CallableInstance) {
  (0, _inherits3.default)(API, _CallableInstance);

  /**
   * Create a new API with the given configuration provided in a single
   * object map. If no argument is provided, the defaults are used. Note that
   * the service URL should *not* end with a '/'.
   *
   * @param service {String} URL to the ESI service, defaults to
   *     `'https://esi.tech.ccp.is'`.
   * @param source {String} Data source used, defaults to `tranquility`.
   * @param agent {String} Custom user agent string to send with each request,
   *     which defaults to this project but really should be set for your app
   * @param language {String} Language character code, defaults to `en-us`
   * @param timeout {Number} Request timeout in milliseconds, defaults to
   *     `6000`
   * @param maxConcurrent {Number} Maximum number of requests running at once,
   *     defaults to 0 (unlimited)
   * @param minTime {Number} Minimum time before launching another request (in
   *     milliseconds), defaults to 0 (no rate limiting)
   * @constructor
   */
  function API() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$service = _ref.service,
        service = _ref$service === undefined ? 'https://esi.tech.ccp.is' : _ref$service,
        _ref$source = _ref.source,
        source = _ref$source === undefined ? 'tranquility' : _ref$source,
        _ref$agent = _ref.agent,
        agent = _ref$agent === undefined ? 'eve-swagger | https://github.com/lhkbob/eve-swagger-js' : _ref$agent,
        _ref$language = _ref.language,
        language = _ref$language === undefined ? 'en-us' : _ref$language,
        _ref$timeout = _ref.timeout,
        timeout = _ref$timeout === undefined ? 6000 : _ref$timeout,
        _ref$maxConcurrent = _ref.maxConcurrent,
        maxConcurrent = _ref$maxConcurrent === undefined ? 0 : _ref$maxConcurrent,
        _ref$minTime = _ref.minTime,
        minTime = _ref$minTime === undefined ? 0 : _ref$minTime;

    (0, _classCallCheck3.default)(this, API);

    var _this = (0, _possibleConstructorReturn3.default)(this, (API.__proto__ || (0, _getPrototypeOf2.default)(API)).call(this, function (config) {
      return new API(config);
    }));

    _this._esiAgent = new ESIAgent({
      service,
      source,
      agent,
      language,
      timeout,
      maxConcurrent,
      minTime
    });

    _this._char = null;

    _this._agent = null;
    _this._blood = null;
    _this._const = null;
    _this._dogma = null;
    _this._faction = null;
    _this._freeport = null;
    _this._graphics = null;
    _this._gate = null;
    _this._indy = null;
    _this._insurance = null;
    _this._moon = null;
    _this._opty = null;
    _this._pi = null;
    _this._planet = null;
    _this._race = null;
    _this._region = null;
    _this._system = null;
    _this._station = null;
    _this._type = null;
    _this._worm = null;

    _this._alliance = null;
    _this._corp = null;
    _this._incursion = null;
    _this._km = null;
    _this._search = null;
    _this._sov = null;
    _this._wars = null;
    return _this;
  }

  /**
   * An instance of Characters using a shared ESIAgent configured based on
   * the API's initialization options.
   *
   * @type {Characters}
   */


  (0, _createClass3.default)(API, [{
    key: 'names',


    /**
     * @esi_route post_universe_names
     *
     * If ids is longer than the reported maximum length for ESI, the array will
     * be split into smaller chunks and multiple requests will be made and then
     * concatenated back together.
     *
     * @esi_example esi.names(ids)
     *
     * @param ids {Array.<Number>}
     * @returns {Promise.<Array.<Object>>}
     */
    value: function names(ids) {
      return _names(this._esiAgent, 'all', ids);
    }

    /**
     * @esi_route get_status
     * @esi_example esi.status()
     *
     * @returns {Promise.<Object>}
     */

  }, {
    key: 'status',
    value: function status() {
      return this._esiAgent.noAuth.get('/v1/status/');
    }
  }, {
    key: 'characters',
    get: function get() {
      if (!this._char) {
        this._char = new Characters(this._esiAgent);
      }
      return this._char;
    }

    /**
     * An instance of Agents using a shared ESIAgent configured based on
     * the API's initialization options.
     *
     * @type {Agents}
     */

  }, {
    key: 'agents',
    get: function get() {
      if (!this._agent) {
        this._agent = new Agents(this._esiAgent);
      }
      return this._agent;
    }

    /**
     * An instance of Bloodlines using a shared ESIAgent configured based on
     * the API's initialization options.
     *
     * @type {Bloodlines}
     */

  }, {
    key: 'bloodlines',
    get: function get() {
      if (!this._blood) {
        this._blood = new Bloodlines(this._esiAgent);
      }
      return this._blood;
    }

    /**
     * An instance of Constellations using a shared ESIAgent configured based
     * on the API's initialization options.
     *
     * @type {Constellations}
     */

  }, {
    key: 'constellations',
    get: function get() {
      if (!this._const) {
        this._const = new Constellations(this._esiAgent);
      }
      return this._const;
    }

    /**
     * An instance of Dogma using a shared ESIAgent configured based
     * on the API's initialization options.
     *
     * @type {Dogma}
     */

  }, {
    key: 'dogma',
    get: function get() {
      if (!this._dogma) {
        this._dogma = new Dogma(this._esiAgent);
      }
      return this._dogma;
    }

    /**
     * An instance of Factions using a shared ESIAgent configured based on
     * the API's initialization options.
     *
     * @type {Factions}
     */

  }, {
    key: 'factions',
    get: function get() {
      if (!this._faction) {
        this._faction = new Factions(this._esiAgent);
      }
      return this._faction;
    }

    /**
     * An instance of Freeports using a shared ESIAgent configured based on
     * the API's initialization options.
     *
     * @type {Freeports}
     */

  }, {
    key: 'freeports',
    get: function get() {
      if (!this._freeport) {
        this._freeport = new Freeports(this._esiAgent);
      }
      return this._freeport;
    }

    /**
     * An instance of Graphics using a shared ESIAgent configured based on
     * the API's initialization options.
     *
     * @type {Graphics}
     */

  }, {
    key: 'graphics',
    get: function get() {
      if (!this._graphics) {
        this._graphics = new Graphics(this._esiAgent);
      }
      return this._graphics;
    }

    /**
     * An instance of Industry using a shared ESIAgent configured based on
     * the API's initialization options.
     *
     * @type {Industry}
     */

  }, {
    key: 'industry',
    get: function get() {
      if (!this._indy) {
        this._indy = new Industry(this._esiAgent);
      }
      return this._indy;
    }

    /**
     * An instance of Insurance using a shared ESIAgent configured based on
     * the API's initialization options.
     *
     * @type {Insurance}
     */

  }, {
    key: 'insurance',
    get: function get() {
      if (!this._insurance) {
        this._insurance = new Insurance(this._esiAgent);
      }
      return this._insurance;
    }

    /**
     * An instance of Moons using a shared ESIAgent configured based
     * on the API's initialization options.
     *
     * @type {Moons}
     */

  }, {
    key: 'moons',
    get: function get() {
      if (!this._moon) {
        this._moon = new Moons(this._esiAgent);
      }
      return this._moon;
    }

    /**
     * An instance of Opportunities using a shared ESIAgent configured based
     * on the API's initialization options.
     *
     * @type {Opportunities}
     */

  }, {
    key: 'opportunities',
    get: function get() {
      if (!this._opty) {
        this._opty = new Opportunities(this._esiAgent);
      }
      return this._opty;
    }

    /**
     * An instance of Planets using a shared ESIAgent configured based
     * on the API's initialization options.
     *
     * @type {Planets}
     */

  }, {
    key: 'planets',
    get: function get() {
      if (!this._planet) {
        this._planet = new Planets(this._esiAgent);
      }
      return this._planet;
    }

    /**
     * An instance of PlanetaryInteraction using a shared ESIAgent configured
     * based on the API's initialization options.
     *
     * @type {PlanetaryInteraction}
     */

  }, {
    key: 'pi',
    get: function get() {
      if (!this._pi) {
        this._pi = new PlanetaryInteraction(this._esiAgent);
      }
      return this._pi;
    }

    /**
     * An instance of Races using a shared ESIAgent configured based on
     * the API's initialization options.
     *
     * @type {Races}
     */

  }, {
    key: 'races',
    get: function get() {
      if (!this._race) {
        this._race = new Races(this._esiAgent);
      }
      return this._race;
    }

    /**
     * An instance of Regions using a shared ESIAgent configured based on
     * the API's initialization options.
     *
     * @type {Regions}
     */

  }, {
    key: 'regions',
    get: function get() {
      if (!this._region) {
        this._region = new Regions(this._esiAgent);
      }
      return this._region;
    }

    /**
     * An instance of SolarSystems using a shared ESIAgent configured based on
     * the API's initialization options.
     *
     * @type {SolarSystems}
     */

  }, {
    key: 'solarSystems',
    get: function get() {
      if (!this._system) {
        this._system = new SolarSystems(this._esiAgent);
      }
      return this._system;
    }

    /**
     * An instance of Stargates using a shared ESIAgent configured based on
     * the API's initialization options.
     *
     * @type {Stargates}
     */

  }, {
    key: 'stargates',
    get: function get() {
      if (!this._gate) {
        this._gate = new Stargates(this._esiAgent);
      }
      return this._gate;
    }

    /**
     * An instance of Stations using a shared ESIAgent configured based on
     * the API's initialization options.
     *
     * @type {Stations}
     */

  }, {
    key: 'stations',
    get: function get() {
      if (!this._station) {
        this._station = new Stations(this._esiAgent);
      }
      return this._station;
    }

    /**
     * An instance of Types using a shared ESIAgent configured based on
     * the API's initialization options.
     *
     * @type {Types}
     */

  }, {
    key: 'types',
    get: function get() {
      if (!this._type) {
        this._type = new Types(this._esiAgent);
      }
      return this._type;
    }

    /**
     * An instance of Wormholes using a shared ESIAgent configured based on
     * the API's initialization options.
     *
     * @type {Wormholes}
     */

  }, {
    key: 'wormholes',
    get: function get() {
      if (!this._worm) {
        this._worm = new Wormholes(this._esiAgent);
      }
      return this._worm;
    }

    /**
     * An instance of Alliances using a shared ESIAgent configured based on
     * the API's initialization options.
     *
     * @type {Alliances}
     */

  }, {
    key: 'alliances',
    get: function get() {
      if (!this._alliance) {
        this._alliance = new Alliances(this._esiAgent);
      }
      return this._alliance;
    }

    /**
     * An instance of Corporations using a shared ESIAgent configured based on
     * the API's initialization options.
     *
     * @type {Corporations}
     */

  }, {
    key: 'corporations',
    get: function get() {
      if (!this._corp) {
        this._corp = new Corporations(this._esiAgent);
      }
      return this._corp;
    }

    /**
     * An instance of Incursions using a shared ESIAgent configured based on
     * the API's initialization options.
     *
     * @type {Incursions}
     */

  }, {
    key: 'incursions',
    get: function get() {
      if (!this._incursion) {
        this._incursion = new Incursions(this._esiAgent);
      }
      return this._incursion;
    }

    /**
     * An instance of Killmail using a shared ESIAgent configured based on
     * the API's initialization options.
     *
     * @type {Killmail}
     */

  }, {
    key: 'killmail',
    get: function get() {
      if (!this._km) {
        this._km = new Killmail(this._esiAgent);
      }
      return this._km;
    }

    /**
     * An instance of Sovereignty using a shared ESIAgent configured based on
     * the API's initialization options.
     *
     * @type {Sovereignty}
     */

  }, {
    key: 'sovereignty',
    get: function get() {
      if (!this._sov) {
        this._sov = new Sovereignty(this._esiAgent);
      }
      return this._sov;
    }

    /**
     * An instance of Wars using a shared ESIAgent configured based on
     * the API's initialization options.
     *
     * @type {Wars}
     */

  }, {
    key: 'wars',
    get: function get() {
      if (!this._wars) {
        this._wars = new Wars(this._esiAgent);
      }
      return this._wars;
    }

    /**
     * An instance of Search using a shared ESIAgent configured based on
     * the API's initialization options. This Search instance is configured to
     * use all categories and is not tied to a character.
     *
     * @type {Search}
     */

  }, {
    key: 'search',
    get: function get() {
      if (!this._search) {
        this._search = new Search(this._esiAgent);
      }
      return this._search;
    }
  }]);
  return API;
}(CallableInstance);

module.exports = API;